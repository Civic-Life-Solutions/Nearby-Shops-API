package org.nearbyshops.DAOsPrepared;


import com.zaxxer.hikari.HikariDataSource;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.JDBCContract;
import org.nearbyshops.Model.ServiceConfiguration;

import java.sql.*;
import java.util.ArrayList;


public class ServiceConfigurationDAOPrepared {


	private HikariDataSource dataSource = Globals.getDataSource();


	@Override
	protected void finalize() throws Throwable {
		// TODO Auto-generated method stub
		super.finalize();	
	}

	
	public int saveService(ServiceConfiguration serviceConfiguration)
	{

		Connection connection = null;
		PreparedStatement statement = null;
		int rowIdOfInsertedRow = -1;

		String insertItemCategory = "INSERT INTO "
				+ ServiceConfiguration.TABLE_NAME
				+ "("

				+ ServiceConfiguration.IMAGE_PATH + ","
				+ ServiceConfiguration.LOGO_IMAGE_PATH + ","
				+ ServiceConfiguration.BACKDROP_IMAGE_PATH + ","

				+ ServiceConfiguration.SERVICE_NAME + ","
				+ ServiceConfiguration.HELPLINE_NUMBER + ","
				+ ServiceConfiguration.ADDRESS + ","

				+ ServiceConfiguration.CITY + ","
				+ ServiceConfiguration.PINCODE + ","
				+ ServiceConfiguration.LANDMARK + ","

				+ ServiceConfiguration.STATE + ","
				+ ServiceConfiguration.COUNTRY + ","
				+ ServiceConfiguration.ISO_COUNTRY_CODE + ","

				+ ServiceConfiguration.ISO_LANGUAGE_CODE + ","
				+ ServiceConfiguration.SERVICE_TYPE + ","
				+ ServiceConfiguration.SERVICE_LEVEL + ","

				+ ServiceConfiguration.LAT_CENTER + ","
				+ ServiceConfiguration.LON_CENTER + ","
				+ ServiceConfiguration.SERVICE_RANGE + ","

				+ ServiceConfiguration.UPDATED + ""
				+ " ) VALUES (?,?,? ,?,?,? ,?,?,? ,?,?,? ,?,?,? ,?,?,? ,?)";
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(insertItemCategory,Statement.RETURN_GENERATED_KEYS);

			statement.setString(1,serviceConfiguration.getImagePath());
			statement.setString(2,serviceConfiguration.getLogoImagePath());
			statement.setString(3,serviceConfiguration.getBackdropImagePath());

			statement.setString(4,serviceConfiguration.getServiceName());
			statement.setString(5,serviceConfiguration.getHelplineNumber());
			statement.setString(6,serviceConfiguration.getAddress());

			statement.setString(7,serviceConfiguration.getCity());
			statement.setObject(8,serviceConfiguration.getPincode());
			statement.setString(9,serviceConfiguration.getLandmark());

			statement.setString(10,serviceConfiguration.getState());
			statement.setString(11,serviceConfiguration.getCountry());
			statement.setString(12,serviceConfiguration.getISOCountryCode());

			statement.setString(13,serviceConfiguration.getISOLanguageCode());
			statement.setObject(14,serviceConfiguration.getServiceType());
			statement.setObject(15,serviceConfiguration.getServiceLevel());

			statement.setObject(16,serviceConfiguration.getLatCenter());
			statement.setObject(17,serviceConfiguration.getLonCenter());
			statement.setObject(18,serviceConfiguration.getServiceRange());

			statement.setTimestamp(19,new Timestamp(System.currentTimeMillis()));




			rowIdOfInsertedRow = statement.executeUpdate();

			ResultSet rs = statement.getGeneratedKeys();

			if(rs.next())
			{
				rowIdOfInsertedRow = rs.getInt(1);
			}
			
			
			
			System.out.println("Key autogenerated Save CurrentServiceConfiguration: " + rowIdOfInsertedRow);
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		
		return rowIdOfInsertedRow;
	}




	public int updateService(ServiceConfiguration serviceConfiguration)
	{	
		String updateStatement = "UPDATE " + ServiceConfiguration.TABLE_NAME

				+ " SET "

				+ ServiceConfiguration.IMAGE_PATH + " = ?,"
				+ ServiceConfiguration.LOGO_IMAGE_PATH + " = ?,"
				+ ServiceConfiguration.BACKDROP_IMAGE_PATH + " = ?,"

				+ ServiceConfiguration.SERVICE_NAME + " = ?,"
				+ ServiceConfiguration.HELPLINE_NUMBER + " = ?,"
				+ ServiceConfiguration.ADDRESS + " = ?,"

				+ ServiceConfiguration.CITY + " = ?,"
				+ ServiceConfiguration.PINCODE + " = ?,"
				+ ServiceConfiguration.LANDMARK + " = ?,"

				+ ServiceConfiguration.STATE + " = ?,"
				+ ServiceConfiguration.COUNTRY + " = ?,"
				+ ServiceConfiguration.ISO_COUNTRY_CODE + " = ?,"

				+ ServiceConfiguration.ISO_LANGUAGE_CODE + " = ?,"
				+ ServiceConfiguration.SERVICE_TYPE + " = ?,"
				+ ServiceConfiguration.SERVICE_LEVEL + " = ?,"

				+ ServiceConfiguration.LAT_CENTER + " = ?,"
				+ ServiceConfiguration.LON_CENTER + " = ?,"
				+ ServiceConfiguration.SERVICE_RANGE + " = ?,"

				+ ServiceConfiguration.UPDATED + " = ?,"

				+ ServiceConfiguration.LAT_MAX + " = ?,"
				+ ServiceConfiguration.LON_MAX + " = ?,"
				+ ServiceConfiguration.LAT_MIN + " = ?,"
				+ ServiceConfiguration.LON_MIN + " = ?,"

				+ " WHERE "

				+ ServiceConfiguration.SERVICE_CONFIGURATION_ID + " = ?";


		Connection connection = null;
		PreparedStatement statement = null;
		int updatedRows = -1;
		
		try {
			
			connection = dataSource.getConnection();

			statement.setString(1,serviceConfiguration.getImagePath());

			statement.setString(4,serviceConfiguration.getServiceName());
			statement.setString(5,serviceConfiguration.getHelplineNumber());
			statement.setString(6,serviceConfiguration.getAddress());

			statement.setString(7,serviceConfiguration.getCity());
			statement.setLong(8,serviceConfiguration.getPincode());
			statement.setString(9,serviceConfiguration.getLandmark());

			statement.setString(10,serviceConfiguration.getState());
			statement.setString(11,serviceConfiguration.getCountry());
			statement.setString(12,serviceConfiguration.getISOCountryCode());

			statement.setString(13,serviceConfiguration.getISOLanguageCode());
			statement.setInt(14,serviceConfiguration.getServiceType());
			statement.setInt(15,serviceConfiguration.getServiceLevel());

			statement.setDouble(16,serviceConfiguration.getLatCenter());
			statement.setDouble(17,serviceConfiguration.getLonCenter());
			statement.setDouble(18,serviceConfiguration.getServiceRange());

			statement.setTimestamp(19,new Timestamp(System.currentTimeMillis()));

			statement.setInt(24,1);


			statement = connection.prepareStatement(updateStatement);

			updatedRows = statement.executeUpdate();
			
			
			System.out.println("Total rows updated: " + updatedRows);	
			
			//conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return updatedRows;
		
	}




	public int deleteService(int serviceID)
	{
		
		String deleteStatement = "DELETE FROM " + ServiceConfiguration.TABLE_NAME
				+ " WHERE " + ServiceConfiguration.SERVICE_CONFIGURATION_ID + " = ?";
		
		
		Connection connection= null;
		PreparedStatement statement = null;
		int rowsCountDeleted = 0;
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(deleteStatement);

			statement.setInt(1,serviceID);
			
			rowsCountDeleted = statement.executeUpdate();
			
			System.out.println(" Deleted Count: " + rowsCountDeleted);	
			
			connection.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		finally
		
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		
		return rowsCountDeleted;
	}
	


	
	
	
	public ArrayList<ServiceConfiguration> readServices(Integer serviceLevel, Integer serviceType,
													  Double latCenterQuery, Double lonCenterQuery,
													  String sortBy,
													  int limit, int offset)
{


		String queryNormal = "SELECT " + " 6371 * acos(cos( radians("
							+ latCenterQuery + ")) * cos( radians( " + ServiceConfiguration.LAT_CENTER
							+ ")) * cos(radians( "
							+ ServiceConfiguration.LON_CENTER + ") - radians(" + lonCenterQuery + "))"
							+ " + sin( radians(" + latCenterQuery+ ")) * sin(radians(" + ServiceConfiguration.LAT_CENTER + "))) as distance" + ","
							+ " * FROM " + ServiceConfiguration.TABLE_NAME;


		boolean isFirst = true;


		if(serviceLevel != null)
		{
			queryNormal = queryNormal + " WHERE " + ServiceConfiguration.SERVICE_LEVEL + " = " + serviceLevel;

			isFirst = false;
		}



		if(serviceType !=null)
		{
			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE " + ServiceConfiguration.SERVICE_TYPE + " = " + serviceType;

				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND " + ServiceConfiguration.SERVICE_TYPE + " = " + serviceType;

			}

		}



		// apply visibility filter


		if(latCenterQuery!=null && lonCenterQuery!=null)
		{

			String queryPartVisibilityFilter = "";




			// filter using Haversine formula using SQL math functions
			queryPartVisibilityFilter = queryPartVisibilityFilter
					+ " (6371.01 * acos(cos( radians("
					+ latCenterQuery
					+ ")) * cos( radians("
					+ ServiceConfiguration.LAT_CENTER
					+ " )) * cos(radians( "
					+ ServiceConfiguration.LON_CENTER
					+ ") - radians("
					+ lonCenterQuery
					+ "))"
					+ " + sin( radians("
					+ latCenterQuery
					+ ")) * sin(radians("
					+ ServiceConfiguration.LAT_CENTER
					+ ")))) <= "
					+ ServiceConfiguration.SERVICE_RANGE ;





			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}



			queryNormal = queryNormal + queryPartVisibilityFilter;


		}





		if(sortBy!=null)
		{
			if(!sortBy.equals(""))
			{
				String queryPartSortBy = " ORDER BY " + sortBy;

				queryNormal = queryNormal + queryPartSortBy;
			}
		}



		if(limit > 0)
		{

			String queryPartLimitOffset = "";

			if(offset>0)
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + offset;

			}else
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + 0;
			}


			queryNormal = queryNormal + queryPartLimitOffset;
		}



		ArrayList<ServiceConfiguration> servicesList = new ArrayList<ServiceConfiguration>();
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.createStatement();


			rs = statement.executeQuery(queryNormal);

			while(rs.next())
			{
				ServiceConfiguration serviceConfiguration = new ServiceConfiguration();

				serviceConfiguration.setRt_distance(rs.getDouble("distance"));

				serviceConfiguration.setServiceID(rs.getInt(ServiceConfiguration.SERVICE_CONFIGURATION_ID));
				serviceConfiguration.setImagePath(rs.getString(ServiceConfiguration.IMAGE_PATH));
				serviceConfiguration.setLogoImagePath(rs.getString(ServiceConfiguration.LOGO_IMAGE_PATH));

				serviceConfiguration.setBackdropImagePath(rs.getString(ServiceConfiguration.BACKDROP_IMAGE_PATH));
				serviceConfiguration.setServiceName(rs.getString(ServiceConfiguration.SERVICE_NAME));
				serviceConfiguration.setHelplineNumber(rs.getString(ServiceConfiguration.HELPLINE_NUMBER));

				serviceConfiguration.setAddress(rs.getString(ServiceConfiguration.ADDRESS));
				serviceConfiguration.setCity(rs.getString(ServiceConfiguration.CITY));
				serviceConfiguration.setPincode(rs.getLong(ServiceConfiguration.PINCODE));

				serviceConfiguration.setLandmark(rs.getString(ServiceConfiguration.LANDMARK));
				serviceConfiguration.setState(rs.getString(ServiceConfiguration.STATE));
				serviceConfiguration.setCountry(rs.getString(ServiceConfiguration.COUNTRY));

				serviceConfiguration.setISOCountryCode(rs.getString(ServiceConfiguration.ISO_COUNTRY_CODE));
				serviceConfiguration.setISOLanguageCode(rs.getString(ServiceConfiguration.ISO_LANGUAGE_CODE));
				serviceConfiguration.setServiceType(rs.getInt(ServiceConfiguration.SERVICE_TYPE));

				serviceConfiguration.setServiceLevel(rs.getInt(ServiceConfiguration.SERVICE_LEVEL));
				serviceConfiguration.setLatCenter(rs.getDouble(ServiceConfiguration.LAT_CENTER));
				serviceConfiguration.setLonCenter(rs.getDouble(ServiceConfiguration.LON_CENTER));

				serviceConfiguration.setServiceRange(rs.getInt(ServiceConfiguration.SERVICE_RANGE));

				serviceConfiguration.setLatMax(rs.getDouble(ServiceConfiguration.LAT_MAX));
				serviceConfiguration.setLonMax(rs.getDouble(ServiceConfiguration.LON_MAX));
				serviceConfiguration.setLatMin(rs.getDouble(ServiceConfiguration.LAT_MIN));

				serviceConfiguration.setLonMin(rs.getDouble(ServiceConfiguration.LON_MIN));

				serviceConfiguration.setCreated(rs.getTimestamp(ServiceConfiguration.CREATED));
				serviceConfiguration.setUpdated(rs.getTimestamp(ServiceConfiguration.UPDATED));


				servicesList.add(serviceConfiguration);
				
			}
			

			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
								
		return servicesList;
	}





	public ServiceConfiguration readServiceConfiguration()
	{
		
		String query = "SELECT * FROM " + ServiceConfiguration.TABLE_NAME
						+ " WHERE " + ServiceConfiguration.SERVICE_CONFIGURATION_ID + " = " + 1;
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;


		ServiceConfiguration serviceConfiguration = null;

		
		try {
			
			connection = dataSource.getConnection();

			statement = connection.createStatement();
			
			rs = statement.executeQuery(query);
			
			while(rs.next())
			{
				serviceConfiguration = new ServiceConfiguration();

				serviceConfiguration.setServiceID(rs.getInt(ServiceConfiguration.SERVICE_CONFIGURATION_ID));
				serviceConfiguration.setImagePath(rs.getString(ServiceConfiguration.IMAGE_PATH));
				serviceConfiguration.setLogoImagePath(rs.getString(ServiceConfiguration.LOGO_IMAGE_PATH));

				serviceConfiguration.setBackdropImagePath(rs.getString(ServiceConfiguration.BACKDROP_IMAGE_PATH));
				serviceConfiguration.setServiceName(rs.getString(ServiceConfiguration.SERVICE_NAME));
				serviceConfiguration.setHelplineNumber(rs.getString(ServiceConfiguration.HELPLINE_NUMBER));

				serviceConfiguration.setAddress(rs.getString(ServiceConfiguration.ADDRESS));
				serviceConfiguration.setCity(rs.getString(ServiceConfiguration.CITY));
				serviceConfiguration.setPincode(rs.getLong(ServiceConfiguration.PINCODE));

				serviceConfiguration.setLandmark(rs.getString(ServiceConfiguration.LANDMARK));
				serviceConfiguration.setState(rs.getString(ServiceConfiguration.STATE));
				serviceConfiguration.setCountry(rs.getString(ServiceConfiguration.COUNTRY));

				serviceConfiguration.setISOCountryCode(rs.getString(ServiceConfiguration.ISO_COUNTRY_CODE));
				serviceConfiguration.setISOLanguageCode(rs.getString(ServiceConfiguration.ISO_LANGUAGE_CODE));
				serviceConfiguration.setServiceType(rs.getInt(ServiceConfiguration.SERVICE_TYPE));

				serviceConfiguration.setServiceLevel(rs.getInt(ServiceConfiguration.SERVICE_LEVEL));
				serviceConfiguration.setLatCenter(rs.getDouble(ServiceConfiguration.LAT_CENTER));
				serviceConfiguration.setLonCenter(rs.getDouble(ServiceConfiguration.LON_CENTER));

				serviceConfiguration.setServiceRange(rs.getInt(ServiceConfiguration.SERVICE_RANGE));

				serviceConfiguration.setLatMax(rs.getDouble(ServiceConfiguration.LAT_MAX));
				serviceConfiguration.setLonMax(rs.getDouble(ServiceConfiguration.LON_MAX));
				serviceConfiguration.setLatMin(rs.getDouble(ServiceConfiguration.LAT_MIN));

				serviceConfiguration.setLonMin(rs.getDouble(ServiceConfiguration.LON_MIN));

				serviceConfiguration.setCreated(rs.getTimestamp(ServiceConfiguration.CREATED));
				serviceConfiguration.setUpdated(rs.getTimestamp(ServiceConfiguration.UPDATED));


			}
			
			
			//System.out.println("Total itemCategories queried " + itemCategoryList.size());	
	
		
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		return serviceConfiguration;
	}	
}
