package org.nearbyshops.DAOsPreparedRoles.Deprecated;

import com.zaxxer.hikari.HikariDataSource;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.ModelRoles.Deprecated.DistributorStaff;

import java.sql.*;
import java.util.ArrayList;


public class DistributorStaffDAOPrepared {


	private HikariDataSource dataSource = Globals.getDataSource();

	
	@Override
	protected void finalize() throws Throwable {
		// TODO Auto-generated method stub
		super.finalize();	
	}
	
	
	
	public int saveDistributorStaff(DistributorStaff distributorStaff)
	{	
		
		Connection connection = null;
		PreparedStatement statement = null;
		int rowIdOfInsertedRow = -1;

		String insert = "INSERT INTO "
				+ DistributorStaff.TABLE_NAME
				+ "("  
				+  DistributorStaff.NAME + ","
				+  DistributorStaff.USERNAME + ","
				+  DistributorStaff.PASSWORD + ","

				+  DistributorStaff.ABOUT + ","
				+  DistributorStaff.PROFILE_IMAGE_URL + ","

				+  DistributorStaff.IS_ENABLED + ","
				+  DistributorStaff.IS_WAITLISTED + ") VALUES(?,?,? ,?,? ,?,?)";
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(insert,PreparedStatement.RETURN_GENERATED_KEYS);

			statement.setString(1, distributorStaff.getName());
			statement.setString(2, distributorStaff.getUsername());
			statement.setString(3, distributorStaff.getPassword());

			statement.setString(4, distributorStaff.getAbout());
			statement.setString(5, distributorStaff.getProfileImageURL());

			statement.setBoolean(6, distributorStaff.getEnabled());
			statement.setBoolean(7, distributorStaff.getWaitlisted());

			rowIdOfInsertedRow = statement.executeUpdate();
			ResultSet rs = statement.getGeneratedKeys();

			if(rs.next())
			{
				rowIdOfInsertedRow = rs.getInt(1);
			}
			
			
			
			System.out.println("Key autogenerated SaveDistributor: " + rowIdOfInsertedRow);
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		
		return rowIdOfInsertedRow;
	}
	

	public int updateDistributor(DistributorStaff distributorStaff)
	{	
		String updateStatement = "UPDATE " + DistributorStaff.TABLE_NAME
				+ " SET "
				+ DistributorStaff.NAME + " = ?,"
				+ DistributorStaff.USERNAME + " = ?,"
				+ DistributorStaff.PASSWORD + " = ?,"

				+ DistributorStaff.ABOUT + " = ?,"
				+ DistributorStaff.PROFILE_IMAGE_URL + " = ?,"

				+ DistributorStaff.IS_ENABLED + " = ?,"
				+ DistributorStaff.IS_WAITLISTED + " = ?"
				+ " WHERE " + DistributorStaff.DISTRIBUTOR_STAFF_ID + " = ?";
		
		Connection connection = null;
		PreparedStatement statement = null;
		int updatedRows = -1;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(updateStatement);

			statement.setString(1,distributorStaff.getName());
			statement.setString(2,distributorStaff.getUsername());
			statement.setString(3,distributorStaff.getPassword());

			statement.setString(4,distributorStaff.getAbout());
			statement.setString(5,distributorStaff.getProfileImageURL());

			statement.setBoolean(6,distributorStaff.getEnabled());
			statement.setBoolean(7,distributorStaff.getWaitlisted());
			statement.setInt(8,distributorStaff.getDistributorStaffID());

			updatedRows = statement.executeUpdate();
			
			
			System.out.println("Total rows updated: " + updatedRows);	
			
			//conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return updatedRows;
		
	}
	

	public int deleteDistributorStaff(int distributorStaffID)
	{
		
		String deleteStatement = "DELETE FROM " + DistributorStaff.TABLE_NAME
				+ " WHERE " + DistributorStaff.DISTRIBUTOR_STAFF_ID  + " = ?";
		
		
		Connection connection= null;
		PreparedStatement statement = null;
		int rowsCountDeleted = 0;
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(deleteStatement);

			statement.setInt(1,distributorStaffID);

			rowsCountDeleted = statement.executeUpdate();
			
			System.out.println(" Deleted Count: " + rowsCountDeleted);	
			
			connection.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		finally
		
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		
		return rowsCountDeleted;
	}
	
	
	
	
	
	public ArrayList<DistributorStaff> getDistributors()
	{
		String query = "SELECT * FROM " + DistributorStaff.TABLE_NAME;

		ArrayList<DistributorStaff> distributorList = new ArrayList<DistributorStaff>();
		
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.createStatement();

			rs = statement.executeQuery(query);
			
			while(rs.next())
			{
				
				DistributorStaff distributorStaff = new DistributorStaff();

				distributorStaff.setDistributorStaffID(rs.getInt(DistributorStaff.DISTRIBUTOR_STAFF_ID));
				distributorStaff.setName(rs.getString(DistributorStaff.NAME));
				distributorStaff.setUsername(rs.getString(DistributorStaff.USERNAME));
				distributorStaff.setPassword(rs.getString(DistributorStaff.PASSWORD));

				distributorStaff.setAbout(rs.getString(DistributorStaff.ABOUT));
				distributorStaff.setProfileImageURL(rs.getString(DistributorStaff.PROFILE_IMAGE_URL));

				distributorStaff.setEnabled(rs.getBoolean(DistributorStaff.IS_ENABLED));
				distributorStaff.setWaitlisted(rs.getBoolean(DistributorStaff.IS_WAITLISTED));

				distributorList.add(distributorStaff);
			}
			
			
			
			
			System.out.println("Total Distributor queried " + distributorList.size());	
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
								
		return distributorList;
	}

	
	public DistributorStaff getDistributor(int distributorID)
	{
		
		String query = "SELECT * FROM " + DistributorStaff.TABLE_NAME
						+ " WHERE ID = " + distributorID;
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		
	
		DistributorStaff distributor = null;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.createStatement();
			
			rs = statement.executeQuery(query);
			
			while(rs.next())
			{
				distributor = new DistributorStaff();

				distributor.setDistributorStaffID(rs.getInt(DistributorStaff.DISTRIBUTOR_STAFF_ID));
				distributor.setName(rs.getString(DistributorStaff.NAME));
				distributor.setUsername(rs.getString(DistributorStaff.USERNAME));
				distributor.setPassword(rs.getString(DistributorStaff.PASSWORD));

				distributor.setAbout(rs.getString(DistributorStaff.ABOUT));
				distributor.setProfileImageURL(rs.getString(DistributorStaff.PROFILE_IMAGE_URL));
				distributor.setEnabled(rs.getBoolean(DistributorStaff.IS_ENABLED));
				distributor.setWaitlisted(rs.getBoolean(DistributorStaff.IS_WAITLISTED));
			}
			
			
			//System.out.println("Total itemCategories queried " + itemCategoryList.size());	
	
		
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		return distributor;
	}

	/*
	public Distributor getDistributorPassword(Integer distributorID, String username)
	{


		String query = "";


		if(distributorID!=null)
		{
			query = "SELECT * FROM " + Distributor.TABLE_NAME
					+ " WHERE ID = " + distributorID;

		}

		else if(username!=null)
		{
			query = "SELECT * FROM " + Distributor.TABLE_NAME
					+ " WHERE " +  Distributor.DISTRIBUTOR_NAME + " = " + "'" + username + "'";

		}



		if(query.equals(""))
		{
			return null;
		}



		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;


		Distributor distributor = null;

		try {

			connection = dataSource.getConnection();
			statement = connection.createStatement();

			rs = statement.executeQuery(query);

			while(rs.next())
			{
				distributor = new Distributor();

				distributor.setDistributorID(rs.getInt(Distributor.DISTRIBUTOR_ID));
				distributor.setDistributorName(rs.getString(Distributor.DISTRIBUTOR_NAME));
				distributor.setUsername(rs.getString(Distributor.USERNAME));
				distributor.setPassword(rs.getString(Distributor.PASSWORD));
				distributor.setEnabled(rs.getBoolean(Distributor.IS_ENABLED));
				distributor.setWaitlisted(rs.getBoolean(Distributor.IS_WAITLISTED));
			}


			//System.out.println("Total itemCategories queried " + itemCategoryList.size());



		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally

		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return distributor;
	}*/




	private void logMessage(String message)
	{
		System.out.println(message);
	}



	// method to authenticate Distributor
	public DistributorStaff checkDistributor(Integer distributorID, String username, String password)
	{


		logMessage("Checking Distributor");


		boolean isFirst = true;

		String query = "SELECT * FROM " + DistributorStaff.TABLE_NAME;

		if(distributorID!=null)
		{
			query = query + " WHERE " + DistributorStaff.DISTRIBUTOR_STAFF_ID + " = " + distributorID;

			isFirst = false;
		}

		if(username!=null)
		{
			String queryPartUsername = DistributorStaff.USERNAME + " = '" + username + "'";

			if(isFirst)
			{
				query = query + " WHERE " + queryPartUsername;

				isFirst = false;
			}
			else
			{
				query = query + " AND " + queryPartUsername;
			}
		}


		if(password!=null)
		{
			String queryPartPassword = DistributorStaff.PASSWORD + " = '" + password + "'";

			if(isFirst)
			{
				query = query + " WHERE " + queryPartPassword;
			}
			else
			{
				query = query + " AND " + queryPartPassword;
			}
		}


		logMessage(query);


		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;


		//Distributor distributor = null;
		DistributorStaff distributor = null;

		try {

			connection = dataSource.getConnection();
			statement = connection.createStatement();

			rs = statement.executeQuery(query);

			while(rs.next())
			{
				distributor = new DistributorStaff();

				logMessage("Inside WHile check Distributor");

				distributor.setDistributorStaffID(rs.getInt(DistributorStaff.DISTRIBUTOR_STAFF_ID));
				distributor.setName(rs.getString(DistributorStaff.NAME));
				distributor.setUsername(rs.getString(DistributorStaff.USERNAME));
				distributor.setPassword(rs.getString(DistributorStaff.PASSWORD));

				distributor.setAbout(rs.getString(DistributorStaff.ABOUT));
				distributor.setProfileImageURL(rs.getString(DistributorStaff.PROFILE_IMAGE_URL));

				distributor.setWaitlisted(rs.getBoolean(DistributorStaff.IS_WAITLISTED));
				distributor.setEnabled(rs.getBoolean(DistributorStaff.IS_ENABLED));
			}


			//System.out.println("Total itemCategories queried " + itemCategoryList.size());



		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally

		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return distributor;
	}
}
