package org.nearbyshops.DAOsPreparedRoles;


import com.zaxxer.hikari.HikariDataSource;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.JDBCContract;
import org.nearbyshops.Model.Order;
import org.nearbyshops.Model.Shop;
import org.nearbyshops.ModelRoles.EndUser;
import org.nearbyshops.ModelRoles.Endpoints.EndUserEndPoint;
import org.nearbyshops.ModelRoles.Endpoints.ShopAdminEndPoint;
import org.nearbyshops.ModelRoles.ShopAdmin;
import org.nearbyshops.ModelRoles.Usernames;

import java.sql.*;
import java.util.ArrayList;


public class EndUserDAONew {

	private HikariDataSource dataSource = Globals.getDataSource();

	
	@Override
	protected void finalize() throws Throwable {
		// TODO Auto-generated method stub
		super.finalize();	
	}


	public int saveEndUser(EndUser endUser)
	{

		Connection connection = null;
		PreparedStatement statement = null;
		PreparedStatement statementUsername = null;
//		int rowIdOfInsertedRow = -1;
		int rowIdUserID = -1;


		String insertUsername = "INSERT INTO "
				+ Usernames.TABLE_NAME
				+ "("
				+ Usernames.USERNAME + ""
				+ ") VALUES(?)";

		String insertItemCategory = "INSERT INTO "
				+ EndUser.TABLE_NAME
				+ "("

				+ EndUser.END_USER_ID + ","
				+ EndUser.END_USER_NAME + ","
//				+ EndUser.USERNAME + ","
				+ EndUser.PASSWORD + ","

				+ EndUser.ABOUT + ","
				+ EndUser.PROFILE_IMAGE_URL + ","

//				+ EndUser.IS_ENABLED + ","
//				+ EndUser.IS_WAITLISTED + ","

				+ EndUser.UPDATED + ""

				+ " ) VALUES (?,?,?, ?,?, ?)";
		
		try {
			
			connection = dataSource.getConnection();
			connection.setAutoCommit(false);


			statementUsername = connection.prepareStatement(insertUsername,PreparedStatement.RETURN_GENERATED_KEYS);
			statementUsername.setString(1,endUser.getUsername());
			statementUsername.executeUpdate();

			ResultSet rs2 = statementUsername.getGeneratedKeys();

			if (rs2.next()) {
				rowIdUserID = rs2.getInt(1);
			}



			statement = connection.prepareStatement(insertItemCategory,Statement.RETURN_GENERATED_KEYS);

			int i = 0;
			statement.setInt(++i,rowIdUserID);
			statement.setString(++i,endUser.getName());
			statement.setString(++i,endUser.getPassword());

			statement.setString(++i,endUser.getAbout());
			statement.setString(++i,endUser.getProfileImageURL());

//			statement.setObject(++i,endUser.getEnabled());
//			statement.setObject(++i,endUser.getWaitlisted());

			statement.setTimestamp(++i,new Timestamp(System.currentTimeMillis()));

			statement.executeUpdate();

//			ResultSet rs = statement.getGeneratedKeys();
//
//			if(rs.next())
//			{
//				rowIdOfInsertedRow = rs.getInt(1);
//			}
			
			
			
			System.out.println("Key autogenerated SaveDistributor: " + rowIdUserID);

			connection.commit();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			if (connection != null) {
				try {
					rowIdUserID=-1;
					connection.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
		}
		finally
		{

			if (statementUsername != null) {
				try {
					statementUsername.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		
		return rowIdUserID;
	}




//	public int updateForAccountApproval(EndUser endUser)
//	{
//
//
//		String updateStatement = "UPDATE " + EndUser.TABLE_NAME
//				+ " SET "
//
//				+ EndUser.IS_ENABLED + " =?,"
//				+ EndUser.IS_WAITLISTED + " =?"
//				+ " WHERE " + EndUser.END_USER_ID + " = ?";
//
//
//		Connection connection = null;
//		PreparedStatement statement = null;
//		int updatedRows = -1;
//
//		try {
//
//			connection = dataSource.getConnection();
//			statement = connection.prepareStatement(updateStatement);
//
//			int i = 0;
//			statement.setObject(++i,endUser.getEnabled());
//			statement.setObject(++i,endUser.getWaitlisted());
//			statement.setObject(++i,endUser.getEndUserID());
//
//			updatedRows = statement.executeUpdate();
//
//
//			System.out.println("Total rows updated: " + updatedRows);
//
//			//conn.close();
//
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		finally
//
//		{
//
//			try {
//
//				if(statement!=null)
//				{statement.close();}
//			} catch (SQLException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//
//			try {
//
//				if(connection!=null)
//				{connection.close();}
//			} catch (SQLException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
//
//		return updatedRows;
//
//	}



	public int updateBySelf(EndUser endUser)
	{

		String updateUsername = "UPDATE " + Usernames.TABLE_NAME
				+ " SET " + Usernames.USERNAME + " = ?"
				+ " WHERE " + Usernames.USER_ID + " = ?";


		// Shop Admin is not allowed to update Enabled or Waitlisted fields they are reserved for Service Level Admins only.

		String updateStatement = "UPDATE " + EndUser.TABLE_NAME
				+ " SET "

				+ EndUser.END_USER_NAME + "=?,"
//				+ EndUser.USERNAME + "=?,"
				+ EndUser.PASSWORD + "=?,"

				+ EndUser.ABOUT + "=?,"
				+ EndUser.PROFILE_IMAGE_URL + "=?,"

				+ EndUser.UPDATED + "=?"

				+ " WHERE " + EndUser.END_USER_ID + " = ?";

		Connection connection = null;
		PreparedStatement statement = null;
		PreparedStatement statementUsername = null;
		int updatedRows = -1;

		try {

			connection = dataSource.getConnection();

			connection.setAutoCommit(false);

			statementUsername = connection.prepareStatement(updateUsername, PreparedStatement.RETURN_GENERATED_KEYS);
			statementUsername.setString(1,endUser.getUsername());
			statementUsername.setInt(2,endUser.getEndUserID());
			statementUsername.executeUpdate();


			statement = connection.prepareStatement(updateStatement);

			int i = 0;
			statement.setString(++i,endUser.getName());
			statement.setString(++i,endUser.getPassword());

			statement.setString(++i,endUser.getAbout());
			statement.setString(++i,endUser.getProfileImageURL());

			statement.setTimestamp(++i,new Timestamp(System.currentTimeMillis()));
			statement.setObject(++i,endUser.getEndUserID());


			updatedRows = statement.executeUpdate();

			System.out.println("Total rows updated: " + updatedRows);

			connection.commit();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			if (connection != null) {
				try {
					
					updatedRows=-1;
					connection.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
		}
		finally
		{

			if (statementUsername != null) {
				try {
					statementUsername.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return updatedRows;

	}




	public int deleteEndUser(int endUserID)
	{

		String deleteUsername = " DELETE FROM " + Usernames.TABLE_NAME +
				" WHERE " + Usernames.USER_ID + " = ?";


		String deleteStatement = "DELETE FROM " + EndUser.TABLE_NAME
				+ " WHERE " + EndUser.END_USER_ID + " = ?";
		
		
		Connection connection= null;
		PreparedStatement statement = null;
		PreparedStatement statementUsername = null;

		int rowsCountDeleted = 0;
		try {
			
			connection = dataSource.getConnection();
			connection.setAutoCommit(false);

			statement = connection.prepareStatement(deleteStatement);
			statement.setInt(1, endUserID);
			rowsCountDeleted = statement.executeUpdate();
			System.out.println(" Deleted Count: " + rowsCountDeleted);

			statementUsername = connection.prepareStatement(deleteUsername);
			statementUsername.setInt(1,endUserID);
			statementUsername.executeUpdate();
			connection.commit();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

			if (connection != null) {
				try {
					rowsCountDeleted=0;
					connection.rollback();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
		}
		
		finally
		
		{

			if (statementUsername != null) {
				try {
					statementUsername.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		
		return rowsCountDeleted;
	}




	public EndUserEndPoint getEndUserPublic(String searchString,
											  String sortBy,
											  Integer limit, Integer offset)
	{
		//+ "count(*) OVER() AS full_count " + ","

		String query = "SELECT "
				+ "count(*) over() AS full_count " + ","

				+ EndUser.END_USER_ID + ","
				+ EndUser.END_USER_NAME + ","

//				+ Usernames.USERNAME + ","
//				+ EndUser.PASSWORD + ","

				+ EndUser.ABOUT + ","
				+ EndUser.PROFILE_IMAGE_URL + ","

//				+ EndUser.IS_ENABLED + ","
//				+ EndUser.IS_WAITLISTED + ","

				+ EndUser.CREATED + ","
				+ EndUser.UPDATED + ""

				+ " FROM " + EndUser.TABLE_NAME
				+ " INNER JOIN " + Usernames.TABLE_NAME + " ON ( " + Usernames.USER_ID + " = " + EndUser.END_USER_ID + ") ";
//				+ " WHERE true ";
//				+ " WHERE " + EndUser.IS_ENABLED + " = true ";




		boolean isFirst = true;
//

		if(searchString !=null)
		{
			String queryPartSearch = EndUser.TABLE_NAME + "." + EndUser.END_USER_NAME +" ilike '%" + searchString + "%'";

			query = query + " AND " + queryPartSearch;

			isFirst = false;
		}



		// Applying Filters


//		query = query + " Group by " +
//				ShopAdmin.SHOP_ADMIN_ID;





		if(sortBy!=null)
		{
			if(!sortBy.equals(""))
			{
				String queryPartSortBy = " ORDER BY " + sortBy;

				query = query + queryPartSortBy;
			}
		}



		if(limit !=null)
		{

			String queryPartLimitOffset = "";

			if(offset!=null)
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + offset;

			}else
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + 0;
			}

			query = query + queryPartLimitOffset;
		}





		EndUserEndPoint endPoint = new EndUserEndPoint();

		ArrayList<EndUser> vehiclesList = new ArrayList<EndUser>();

		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;

		try {

			connection = dataSource.getConnection();
			statement = connection.createStatement();

			rs = statement.executeQuery(query);

			while(rs.next())
			{

				EndUser endUser = new EndUser();

				endUser.setEndUserID(rs.getInt(EndUser.END_USER_ID));
				endUser.setName(rs.getString(EndUser.END_USER_NAME));
				endUser.setAbout(rs.getString(EndUser.ABOUT));
				endUser.setProfileImageURL(rs.getString(EndUser.PROFILE_IMAGE_URL));
//				endUser.setEnabled(rs.getBoolean(EndUser.IS_ENABLED));
//				endUser.setWaitlisted(rs.getBoolean(EndUser.IS_WAITLISTED));
				endUser.setCreated(rs.getTimestamp(EndUser.CREATED));
				endUser.setUpdated(rs.getTimestamp(EndUser.UPDATED));

				endPoint.setItemCount(rs.getInt("full_count"));
				vehiclesList.add(endUser);

			}


			endPoint.setResults(vehiclesList);


//rs.getInt("full_count")

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		finally
		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return endPoint;
	}



	
	
	public ArrayList<EndUser> getEndUserForStaff(String searchString,
													  String sortBy,
													  Integer limit, Integer offset)
	{
		//+ "count(*) OVER() AS full_count " + ","

		String query = "SELECT "
//						+ "count(*) over() AS full_count " + ","

						+ EndUser.END_USER_ID + ","
						+ EndUser.END_USER_NAME + ","

						+ Usernames.USERNAME + ","
						+ EndUser.PASSWORD + ","

						+ EndUser.ABOUT + ","
						+ EndUser.PROFILE_IMAGE_URL + ","

		//				+ EndUser.IS_ENABLED + ","
		//				+ EndUser.IS_WAITLISTED + ","

						+ EndUser.UPDATED + ","
						+ EndUser.UPDATED + ""

						+ " FROM " + EndUser.TABLE_NAME
						+ " INNER JOIN " + Usernames.TABLE_NAME + " ON ( " + Usernames.USER_ID + " = " + EndUser.END_USER_ID + ")";


		boolean isFirst = true;

//		if(enabled !=null)
//		{
//			query = query + " WHERE " + ShopAdmin.IS_ENABLED + " = "  + enabled;
//
//			isFirst = false;
//		}
//
//
//		if(waitlisted !=null)
//		{
//			if(isFirst)
//			{
//				query = query + " WHERE " + ShopAdmin.IS_WAITLISTED + " = "  + waitlisted;
//
//				isFirst = false;
//			}
//			else
//			{
//				query = query + " AND " + ShopAdmin.IS_WAITLISTED + " = "  + waitlisted;
//			}
//		}



		if(searchString !=null)
		{

			String queryPartSearch = EndUser.TABLE_NAME + "." + EndUser.END_USER_NAME +" ilike '%" + searchString + "%'"
					+ " or CAST ( " + EndUser.TABLE_NAME + "." + EndUser.END_USER_ID + " AS text )" + " ilike '%" + searchString + "%'" + ") ";

			query = query + " WHERE " + queryPartSearch;

			isFirst = false;
		}



		// Applying Filters


//		query = query + " Group by " +
//				ShopAdmin.SHOP_ADMIN_ID;





		if(sortBy!=null)
		{
			if(!sortBy.equals(""))
			{
				String queryPartSortBy = " ORDER BY " + sortBy;

				query = query + queryPartSortBy;
			}
		}



		if(limit !=null)
		{

			String queryPartLimitOffset = "";

			if(offset!=null)
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + offset;

			}else
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + 0;
			}

			query = query + queryPartLimitOffset;
		}





//		ShopAdminEndPoint endPoint = new ShopAdminEndPoint();

		ArrayList<EndUser> vehiclesList = new ArrayList<EndUser>();
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.createStatement();
			
			rs = statement.executeQuery(query);
			
			while(rs.next())
			{

				EndUser endUser = new EndUser();

				endUser.setEndUserID(rs.getInt(EndUser.END_USER_ID));
				endUser.setName(rs.getString(EndUser.END_USER_NAME));
				endUser.setUsername(rs.getString(Usernames.USERNAME));
				endUser.setPassword(rs.getString(EndUser.PASSWORD));
				endUser.setAbout(rs.getString(EndUser.ABOUT));
				endUser.setProfileImageURL(rs.getString(EndUser.PROFILE_IMAGE_URL));
				endUser.setCreated(rs.getTimestamp(EndUser.CREATED));
				endUser.setUpdated(rs.getTimestamp(EndUser.UPDATED));

				vehiclesList.add(endUser);
			}
			
//rs.getInt("full_count")
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		finally
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}


		return vehiclesList;
	}




	public EndUserEndPoint getEndpointMetadata(String searchString)
	{

		String query = "SELECT "
				+ EndUser.END_USER_ID + ""
				+ " FROM " + EndUser.TABLE_NAME
				+ " INNER JOIN " + Usernames.TABLE_NAME + " ON ( " + Usernames.USER_ID + " = " + EndUser.END_USER_ID + ")";



		boolean isFirst = true;

//		if(enabled !=null)
//		{
//			query = query + " WHERE " + ShopAdmin.IS_ENABLED + " = "  + enabled;
//
//			isFirst = false;
//		}
//
//
//		if(waitlisted !=null)
//		{
//			if(isFirst)
//			{
//				query = query + " WHERE " + ShopAdmin.IS_WAITLISTED + " = "  + waitlisted;
//
//				isFirst = false;
//			}
//			else
//			{
//				query = query + " AND " + ShopAdmin.IS_WAITLISTED + " = "  + waitlisted;
//			}
//		}





		if(searchString !=null)
		{

			String queryPartSearch = EndUser.TABLE_NAME + "." + EndUser.END_USER_NAME +" ilike '%" + searchString + "%'"
					+ " or CAST ( " + EndUser.TABLE_NAME + "." + EndUser.END_USER_ID + " AS text )" + " ilike '%" + searchString + "%'" + ") ";

			query = query + " WHERE " + queryPartSearch;

			isFirst = false;
		}


		// Applying Filters


		query = "SELECT COUNT(*) as item_count FROM (" + query + ") AS temp";




		EndUserEndPoint endPoint = new EndUserEndPoint();

		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;

		try {

			connection = dataSource.getConnection();
			statement = connection.createStatement();

			rs = statement.executeQuery(query);

			while(rs.next())
			{
				endPoint.setItemCount(rs.getInt("item_count"));
			}

			System.out.println("Total ShopAndmin Endpoint : Count :  " + endPoint.getItemCount());


		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		finally
		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}


		return endPoint;
	}




	public EndUser getEndUserForLogin(int endUserID)
	{

		String query = "SELECT "

				+ EndUser.END_USER_ID + ","
				+ EndUser.END_USER_NAME + ","

				+ Usernames.USERNAME + ","
				+ EndUser.PASSWORD + ","

				+ EndUser.ABOUT + ","
				+ EndUser.PROFILE_IMAGE_URL + ","

				//				+ EndUser.IS_ENABLED + ","
				//				+ EndUser.IS_WAITLISTED + ","

				+ EndUser.CREATED + ","
				+ EndUser.UPDATED + ""

				+ " FROM " + EndUser.TABLE_NAME
				+ " INNER JOIN " + Usernames.TABLE_NAME + " ON ( " + Usernames.USER_ID + " = " + EndUser.END_USER_ID + ")"
				+ " WHERE " + EndUser.TABLE_NAME + "." + EndUser.END_USER_ID + " = " + endUserID;


		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;


		EndUser endUser = null;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.createStatement();
			rs = statement.executeQuery(query);
			
			while(rs.next())
			{
				endUser = new EndUser();

				endUser.setEndUserID(rs.getInt(EndUser.END_USER_ID));
				endUser.setName(rs.getString(EndUser.END_USER_NAME));
				endUser.setUsername(rs.getString(Usernames.USERNAME));
				endUser.setPassword(rs.getString(EndUser.PASSWORD));
				endUser.setAbout(rs.getString(EndUser.ABOUT));
				endUser.setProfileImageURL(rs.getString(EndUser.PROFILE_IMAGE_URL));
				endUser.setCreated(rs.getTimestamp(EndUser.CREATED));
				endUser.setUpdated(rs.getTimestamp(EndUser.UPDATED));
			}
			
			
			//System.out.println("Total itemCategories queried " + itemCategoryList.size());	
	
		
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		return endUser;
	}




	public boolean checkUsernameExists(String username)
	{

		String query = "SELECT " + Usernames.USERNAME
				+ " FROM " + Usernames.TABLE_NAME
				+ " WHERE " + Usernames.USERNAME + " = '" + username + "'";

		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;

//		System.out.println(query);

		try {

			connection = dataSource.getConnection();
			statement = connection.createStatement();
			rs = statement.executeQuery(query);


			while(rs.next())
			{

				return true;
			}


		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally

		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return false;
	}




	public void logMessage(String message)
	{
		System.out.println(message);
	}






	public EndUser checkEndUser(String username, String password)
	{


		logMessage("Checking EndUser");


		boolean isFirst = true;

		String query = "SELECT "
						+ EndUser.TABLE_NAME + "." + EndUser.END_USER_ID + ","

						+ Usernames.USERNAME + ","
						+ EndUser.PASSWORD + ""

						+ " FROM " + EndUser.TABLE_NAME
						+ " INNER JOIN " + Usernames.TABLE_NAME + " ON (" + Usernames.USER_ID + " = " + EndUser.END_USER_ID + ")";



		if(username!=null)
		{
			String queryPartUsername = Usernames.USERNAME + " = '" + username + "'";

			query = query + " WHERE " + queryPartUsername;

			isFirst = false;
		}


		if(password!=null)
		{
			String queryPartPassword = EndUser.PASSWORD + " = '" + password + "'";

			if(isFirst)
			{
				query = query + " WHERE " + queryPartPassword;
			}
			else
			{
				query = query + " AND " + queryPartPassword;
			}
		}


		logMessage(query);


		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;


		EndUser endUser = null;

		try {

			connection = dataSource.getConnection();
			statement = connection.createStatement();
			rs = statement.executeQuery(query);

			while(rs.next())
			{

				logMessage("Inside While check End user");

				endUser = new EndUser();

				endUser.setEndUserID(rs.getInt(EndUser.END_USER_ID));
				endUser.setUsername(rs.getString(Usernames.USERNAME));
				endUser.setPassword(rs.getString(EndUser.PASSWORD));
			}


		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally

		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return endUser;
	}


}
