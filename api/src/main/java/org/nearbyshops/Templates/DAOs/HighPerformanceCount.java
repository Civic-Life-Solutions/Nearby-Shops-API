package org.nearbyshops.Templates.DAOs;

import com.zaxxer.hikari.HikariDataSource;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.Model.Item;
import org.nearbyshops.Model.ItemCategory;
import org.nearbyshops.Model.Shop;
import org.nearbyshops.Model.ShopItem;
import org.nearbyshops.ModelEndPoints.ShopEndPoint;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by sumeet on 13/12/16.
 */
public class HighPerformanceCount {

    private HikariDataSource dataSource = Globals.getDataSource();

    // an example of high performance count query
    public ShopEndPoint getEndPointMetadataFilterShops(
            Double latCenter, Double lonCenter,
            Double deliveryRangeMin,Double deliveryRangeMax,
            Double proximity
    )

    {


        String query = "";
        String queryJoin = "";


        queryJoin = "SELECT DISTINCT "
                + Shop.TABLE_NAME + "." + Shop.SHOP_ID

                + " FROM "
                + Shop.TABLE_NAME  + "," + ShopItem.TABLE_NAME + ","
                + Item.TABLE_NAME + "," + ItemCategory.TABLE_NAME

                + " WHERE " + Shop.TABLE_NAME + "." + Shop.SHOP_ID + "=" + ShopItem.TABLE_NAME + "." + ShopItem.SHOP_ID
                + " AND " + ShopItem.TABLE_NAME + "." + ShopItem.ITEM_ID + "=" + Item.TABLE_NAME + "." + Item.ITEM_ID
                + " AND " + Item.TABLE_NAME + "." + Item.ITEM_CATEGORY_ID + "=" + ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID;


        // Visibility Filter : Apply
        if(latCenter != null && lonCenter != null)
        {
            // Applying shop visibility filter. Gives all the shops which are visible at the given location defined by
            // latCenter and lonCenter. For more information see the API documentation.

//			String queryPartlat = "";

            queryJoin = queryJoin + " AND "
                    + " (6371.01 * acos(cos( radians( ? )) * cos( radians(" + Shop.LAT_CENTER + " )) * cos(radians( "
                    + Shop.LON_CENTER + ") - radians( ? ))" + " + sin( radians( ? )) * sin(radians("
                    + Shop.LAT_CENTER + ")))) <= " + Shop.DELIVERY_RANGE + "" ;


//			String queryPartlatLonCenter = "";
//			queryPartlatLonCenter = queryPartlatLonCenter + " 6371.01 * acos( cos( radians("
//					+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
//					+ lonCenter + "))"
//					+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) <= delivery_range ";

//			queryJoin = queryJoin + " AND " + queryPartlat;

        }



        // Delivery Range Filter : apply
        if(deliveryRangeMin != null && deliveryRangeMax != null){

            // apply delivery range filter
            String queryPartDeliveryRange = "";

            queryPartDeliveryRange = queryPartDeliveryRange
                    + Shop.TABLE_NAME + "." + Shop.DELIVERY_RANGE + " BETWEEN ? AND ?";

            queryJoin = queryJoin + " AND " + queryPartDeliveryRange;
        }


        // Proximity Filter
        if(proximity != null)
        {
            // proximity > 0 && (deliveryRangeMax==0 || (deliveryRangeMax > 0 && proximity <= deliveryRangeMax))

            String queryPartProximity = "";


            // Make sure that shop center lies between the bounding coordinates generated by proximity bounding box


            // filter using Haversine formula using SQL math functions
            queryPartProximity = queryPartProximity
                    + " (6371.01 * acos(cos( radians( ? )) * cos( radians(" + Shop.LAT_CENTER + " )) * cos(radians( "
                    + Shop.LON_CENTER + ") - radians( ? ))" + " + sin( radians( ? )) * sin(radians("
                    + Shop.LAT_CENTER + ")))) <= ? ";


            queryJoin = queryJoin + " AND " + queryPartProximity;
        }


        query = queryJoin;



        query = "SELECT COUNT(*) as item_count FROM (" + query + ") AS temp";


        ShopEndPoint endPoint = new ShopEndPoint();


        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet rs = null;

        try {

            connection = dataSource.getConnection();
            statement = connection.prepareStatement(query);

            int i = 0;

            if(latCenter!=null && lonCenter!=null)
            {
                statement.setDouble(++i,latCenter);
                statement.setDouble(++i,lonCenter);
                statement.setDouble(++i,latCenter);
            }

            if(deliveryRangeMin!=null && deliveryRangeMax!=null)
            {
                statement.setObject(++i,deliveryRangeMin);
                statement.setObject(++i,deliveryRangeMax);
            }


            if(proximity!=null)
            {
                statement.setDouble(++i,latCenter);
                statement.setDouble(++i,lonCenter);
                statement.setDouble(++i,latCenter);

                statement.setObject(++i,proximity);
            }



            rs = statement.executeQuery();

            while(rs.next())
            {

                endPoint.setItemCount(rs.getInt("item_count"));


            }

            System.out.println("Total Shops Item Count :  " + endPoint.getItemCount());



        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


        finally

        {

            try {
                if(rs!=null)
                {rs.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        return endPoint;
    }


}
