package org.nearbyshops.DAOs;

import org.nearbyshops.ContractClasses.CartContract;
import org.nearbyshops.ContractClasses.JDBCContract;
import org.nearbyshops.ContractClasses.OrderContract;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.Model.Cart;
import org.nearbyshops.Model.Order;

import java.sql.*;
import java.util.ArrayList;

/**
 * Created by sumeet on 7/6/16.
 */
public class OrderService {


    public Order placeOrder(Order order, int cartID)
    {

        /*

        1. Copy cart to order
        2. Copy cart_item to order_item
        3. update available_item_quantity from order to shop_item
        4. delete cart_item
        5. delete cart
         */


        int orderID = -1;
        int rowCount = -1;
        int rowCountAvailableItemQuantity= -1;
        int status = 0;

        orderID = copyCartToOrder(cartID);

        if(orderID > 0)
        {
            status = 1;
            rowCount = copyCartItemToOrderItem(orderID,cartID);

        }

        if(rowCount > 0)
        {
            status = 2;
            rowCountAvailableItemQuantity = Globals.shopItemService.updateAvailableItemQuantity(orderID);

            // delete cart_item here
            Globals.cartItemService.deleteCartItem(0,cartID);

            // delete cart here
            Globals.cartService.deleteCart(cartID);

        }

        if(orderID>0 && rowCount>0)
        {
            Order tempOrder = readOrder(orderID);

            order.setOrderID(orderID);
            order.setEndUserID(tempOrder.getEndUserID());
            order.setShopID(tempOrder.getShopID());

            if(order.getPickFromShop())
            {
               order.setDeliveryCharges(0);

            }else
            {
                order.setDeliveryCharges((int)Globals.shopService.getShop(tempOrder.getShopID(),0,0).getDeliveryCharges());
            }

            updateOrder(order);

            return readOrder(orderID);

        }

        return null;
    }



    public int copyCartToOrder(int cartID)
    {

        String copyCartToOrder = "insert into customer_order " +
                "(end_user_id,shop_id) " +
                "select end_user_id , shop_id from cart where cart_id = " +
                cartID;


        Connection conn = null;
        Statement stmt = null;
        int rowIdOfInsertedRow = -1;



        try {

            conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
                    JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);

            stmt = conn.createStatement();

            rowIdOfInsertedRow = stmt.executeUpdate(copyCartToOrder,Statement.RETURN_GENERATED_KEYS);

            ResultSet rs = stmt.getGeneratedKeys();

            if(rs.next())
            {
                rowIdOfInsertedRow = rs.getInt(1);
            }



            System.out.println("Key autogenerated SaveDistributor: " + rowIdOfInsertedRow);


        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally
        {

            try {

                if(stmt!=null)
                {stmt.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(conn!=null)
                {conn.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return rowIdOfInsertedRow;
    }


    public int copyCartItemToOrderItem(int orderID, int cartID)
    {



        String copyCartItemToOrderItem =

                "insert into order_item (order_id,item_id, item_price_at_order,item_quantity) " +
                " select " +
                orderID +
                ", shop_item.item_id,item_price, cart_item.item_quantity from cart_item, cart,shop_item " +
                " where " +
                " cart.cart_id = cart_item.cart_id " +
                " and " +
                "shop_item.shop_id = cart.shop_id" +
                " and " +
                " shop_item.item_id = cart_item.item_id " +
                " and " +
                " cart.cart_id = " + cartID;


        Connection conn = null;
        Statement stmt = null;
        int rowCount = -1;



        try {

            conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
                    JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);

            stmt = conn.createStatement();

            rowCount = stmt.executeUpdate(copyCartItemToOrderItem,Statement.RETURN_GENERATED_KEYS);

            //ResultSet rs = stmt.getGeneratedKeys();

            //if(rs.next())
            //{
            //    rowIdOfInsertedRow = rs.getInt(1);
            //}



            //System.out.println("Key autogenerated SaveDistributor: " + rowIdOfInsertedRow);


        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally
        {

            try {

                if(stmt!=null)
                {stmt.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(conn!=null)
                {conn.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return rowCount;
    }




    public Order readOrder(int orderID)
    {

        String query = "SELECT * FROM " + OrderContract.TABLE_NAME
                + " WHERE " + OrderContract.ORDER_ID + " = " + orderID;

        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        Order order = null;

        try {

            conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
                    JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);

            stmt = conn.createStatement();

            rs = stmt.executeQuery(query);

            while(rs.next())
            {
                order = new Order();
                order.setShopID(rs.getInt(OrderContract.SHOP_ID));
                order.setDeliveryCharges(rs.getInt(OrderContract.DELIVERY_CHARGES));
                order.setDeliveryAddressID(rs.getInt(OrderContract.DELIVERY_ADDRESS_ID));
                order.setEndUserID(rs.getInt(OrderContract.END_USER_ID));
                order.setOrderID(rs.getInt(OrderContract.ORDER_ID));
                order.setOrderStatus(rs.getInt(OrderContract.ORDER_STATUS));
                order.setPickFromShop(rs.getBoolean(OrderContract.PICK_FROM_SHOP));
                order.setDateTimePlaced(rs.getTimestamp(OrderContract.DATE_TIME_PLACED));
            }


            //System.out.println("Total itemCategories queried " + itemCategoryList.size());



        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally

        {

            try {
                if(rs!=null)
                {rs.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(stmt!=null)
                {stmt.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(conn!=null)
                {conn.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        return order;
    }


    public ArrayList<Order> readOrders(int endUserID, int shopID)
    {
        String query = "SELECT * FROM " + OrderContract.TABLE_NAME;

        boolean isFirst = true;

        if(endUserID > 0)
        {
            query = query + " WHERE " + OrderContract.END_USER_ID + " = " + endUserID;

            isFirst = false;
        }

        if(shopID > 0 )
        {
            if(isFirst)
            {
                query = query + " WHERE " + OrderContract.SHOP_ID + " = " + shopID;

            }else
            {
                query = query + " AND " + OrderContract.SHOP_ID + " = " + shopID;

            }

        }



        ArrayList<Order> ordersList = new ArrayList<Order>();

        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {

            conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL
                    ,JDBCContract.CURRENT_USERNAME
                    , JDBCContract.CURRENT_PASSWORD);

            stmt = conn.createStatement();

            rs = stmt.executeQuery(query);

            while(rs.next())
            {

                Order order = new Order();
                order.setShopID(rs.getInt(OrderContract.SHOP_ID));
                order.setDeliveryCharges(rs.getInt(OrderContract.DELIVERY_CHARGES));
                order.setDeliveryAddressID(rs.getInt(OrderContract.DELIVERY_ADDRESS_ID));
                order.setEndUserID(rs.getInt(OrderContract.END_USER_ID));
                order.setOrderID(rs.getInt(OrderContract.ORDER_ID));
                order.setOrderStatus(rs.getInt(OrderContract.ORDER_STATUS));
                order.setPickFromShop(rs.getBoolean(OrderContract.PICK_FROM_SHOP));
                order.setDateTimePlaced(rs.getTimestamp(OrderContract.DATE_TIME_PLACED));

                ordersList.add(order);

            }



        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


        finally

        {

            try {
                if(rs!=null)
                {rs.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(stmt!=null)
                {stmt.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(conn!=null)
                {conn.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return ordersList;
    }





    public int updateOrder(Order order)
    {
        String updateStatement = "UPDATE " + OrderContract.TABLE_NAME
                + " SET "
                + OrderContract.END_USER_ID + " = "
                + " " + order.getEndUserID() + " "
                + ","
                + " " + OrderContract.SHOP_ID + " = "
                + " " + order.getShopID() + " "
                + ","
                + " " + OrderContract.ORDER_STATUS + " = "
                + " " + order.getOrderStatus() + " "
                + ","
                + " " + OrderContract.DELIVERY_CHARGES + " = "
                + " " + order.getDeliveryCharges() + " "
                + ","
                + " " + OrderContract.DELIVERY_ADDRESS_ID + " = "
                + " " + order.getDeliveryAddressID() + " "
                + ","
                + " " + OrderContract.PICK_FROM_SHOP + " = "
                + " " + order.getPickFromShop() + " "
                + ""
                + " WHERE " + OrderContract.ORDER_ID + " = "
                + order.getOrderID();

        Connection conn = null;
        Statement stmt = null;
        int updatedRows = -1;

        try {

            conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
                    JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);

            stmt = conn.createStatement();

            updatedRows = stmt.executeUpdate(updateStatement);


            System.out.println("Total rows updated: " + updatedRows);

            //conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally

        {

            try {

                if(stmt!=null)
                {stmt.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(conn!=null)
                {conn.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        return updatedRows;

    }




}
