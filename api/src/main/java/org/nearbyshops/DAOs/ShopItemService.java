package org.nearbyshops.DAOs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.nearbyshops.ContractClasses.ItemCategoryContract;
import org.nearbyshops.ContractClasses.ItemContract;
import org.nearbyshops.ContractClasses.JDBCContract;
import org.nearbyshops.ContractClasses.ShopContract;
import org.nearbyshops.ContractClasses.ShopItemContract;
import org.nearbyshops.Model.ShopItem;
import org.nearbyshops.Utility.GeoLocation;

public class ShopItemService {

	public int insertShopItem(ShopItem shopItem)
	{
		
		Connection conn = null;
		Statement stmt = null;
		int rowCount = -1;

		//+ "" + shopItem.getQuantityUnit() + ","
		//+ "" + shopItem.getQuantityMultiple() + ","

		String insertShop = "INSERT INTO "
				+ ShopItemContract.TABLE_NAME				
				+ "("  
				+ ShopItemContract.SHOP_ID + ","
				+ ShopItemContract.ITEM_PRICE + ","
				+ ShopItemContract.ITEM_ID + ","
				+ ShopItemContract.AVAILABLE_ITEM_QUANTITY
				+ " ) VALUES ("
				+ "" + shopItem.getShopID() + ","
				+ "" + shopItem.getItemPrice() + ","
				+ "" + shopItem.getItemID() + ","
				+ "" + shopItem.getAvailableItemQuantity()
				+ ")";
		
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			rowCount = stmt.executeUpdate(insertShop,Statement.RETURN_GENERATED_KEYS);
			
			
			System.out.println("Key autogenerated SaveShop: Rows Inserted = " + rowCount);
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return rowCount;
	}
	
	
	
	public int updateShopItem(ShopItem shopItem)
	{
		/*

				+ ShopItemContract.QUANTITY_MULTIPLE + " ="
				+ "" + shopItem.getQuantityMultiple() + ","
				+ ShopItemContract.QUANTITY_UNIT + " ="
				+ "'" + shopItem.getQuantityUnit() + "',"
		 */

		String updateStatement = "UPDATE " + ShopItemContract.TABLE_NAME 
				+ " SET " + ShopItemContract.AVAILABLE_ITEM_QUANTITY + " = "
				+ "" + shopItem.getAvailableItemQuantity() + ","
				+ ShopItemContract.ITEM_ID + " ="
				+ "" + shopItem.getItemID() + ","
				+ ShopItemContract.ITEM_PRICE + " ="
				+ "" + shopItem.getItemPrice() + ","
				+ ShopItemContract.SHOP_ID + " ="
				+ "" + shopItem.getShopID() + ""
				+ " WHERE " + ShopItemContract.SHOP_ID + " = "
				+ shopItem.getShopID() + " AND "
				+ ShopItemContract.ITEM_ID + " = " 
				+ shopItem.getItemID();
		
		System.out.println("Query:" + updateStatement);
		
		
		Connection conn = null;
		Statement stmt = null;
		int updatedRows = -1;
		
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			updatedRows = stmt.executeUpdate(updateStatement);
			
			
			System.out.println("Total rows updated: " + updatedRows);	
			
			//conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		
		{
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return updatedRows;
	}
	
	
	
	
	public int deleteShopItem(int shopID,int itemID)
	{
		String deleteStatement = "DELETE FROM " + ShopItemContract.TABLE_NAME 
				+ " WHERE " + ShopItemContract.SHOP_ID + " = " + shopID
				+ " AND " + ShopItemContract.ITEM_ID + " = " + itemID;
		
		
		Connection conn= null;
		Statement stmt = null;
		int rowsCountDeleted = 0;
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			rowsCountDeleted = stmt.executeUpdate(deleteStatement);
			
			System.out.println(" Deleted Count: " + rowsCountDeleted);	
			
			conn.close();	
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		finally
		
		{
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		
		return rowsCountDeleted;
	}



	GeoLocation center;

	GeoLocation[] minMaxArray;
	GeoLocation pointOne;
	GeoLocation pointTwo;



public ArrayList<ShopItem> getShopItems(
											int shopID, int itemID,
											int itemCategoryID,
											double latCenter, double lonCenter,
											double deliveryRangeMin, double deliveryRangeMax,
											double proximity
)
{

		String query = "";

		// set this flag to false after setting the first query
		boolean isFirst = true;
		
		
		
		String queryNormal = "SELECT * FROM " + ShopItemContract.TABLE_NAME;
	

		String query2 = "SELECT " 
			+ "SI." + ShopItemContract.ITEM_ID + ","
			+ "SI." + ShopItemContract.SHOP_ID + ","
			+ "SI." + ShopItemContract.ITEM_PRICE + ","
			+ "SI." + ShopItemContract.AVAILABLE_ITEM_QUANTITY + ""
			+ " FROM " 
			+ ShopContract.TABLE_NAME + " S" 
			+ " INNER JOIN " 
			+ ShopItemContract.TABLE_NAME + " SI"
			+ " INNER JOIN "
			+ ItemContract.TABLE_NAME + " I"
			+ " INNER JOIN "
			+ ItemCategoryContract.TABLE_NAME + " IC";
		
	
	
	
	
	
	/*
			+ " ON " 
			+ "S." + ShopContract.SHOP_ID + "=" + "SI." + ShopItemContract.SHOP_ID
			+ " ON "
			+ "SI." + ShopItemContract.ITEM_ID + "=" + "I." + ItemContract.ITEM_ID
			+ " ON "
			+ "I." + ItemContract.ITEM_CATEGORY_ID + "=" + "IC." + ItemCategoryContract.ITEM_CATEGORY_ID;
	
	*/
	
	
	
	String queryJoin = "SELECT DISTINCT "
			+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.ITEM_ID + ","
			+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.SHOP_ID + ","
			+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.ITEM_PRICE + ","
			+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.AVAILABLE_ITEM_QUANTITY + ""
			+ " FROM " 
			+ ShopContract.TABLE_NAME  + "," + ShopItemContract.TABLE_NAME + "," 
			+ ItemContract.TABLE_NAME + "," + ItemCategoryContract.TABLE_NAME
			+ " WHERE " 
			+ ShopContract.TABLE_NAME + "." + ShopContract.SHOP_ID 
			+ "="
			+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.SHOP_ID
			+ " AND "
			+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.ITEM_ID
			+ "="
			+ ItemContract.TABLE_NAME + "." + ItemContract.ITEM_ID
			+ " AND "
			+ ItemContract.TABLE_NAME + "." + ItemContract.ITEM_CATEGORY_ID
			+ "="
			+ ItemCategoryContract.TABLE_NAME + "." + ItemCategoryContract.ITEM_CATEGORY_ID;
	
	

	if(shopID > 0)
	{
			queryJoin = queryJoin + " AND "
					+ ShopItemContract.TABLE_NAME 
					+ "."
					+ ShopItemContract.SHOP_ID + " = " + shopID;


			queryNormal = queryNormal + " WHERE "
						+ ShopItemContract.SHOP_ID + " = " + shopID;

			isFirst = false;
		
	}
	
	
	if(itemID > 0)
	{	
	
		queryJoin = queryJoin + " AND "
					+ ShopItemContract.TABLE_NAME
					+ "."
					+ ShopItemContract.ITEM_ID + " = " + itemID;


		if(isFirst)
		{
			queryNormal = queryNormal + " WHERE "
					+ ShopItemContract.ITEM_ID + " = " + itemID;
		}else
		{
			queryNormal = queryNormal + " AND "
					+ ShopItemContract.ITEM_ID + " = " + itemID;
		}

	}
	
	
	
	if(itemCategoryID > 0)
	{

			queryJoin = queryJoin + " AND "
					+ ItemCategoryContract.TABLE_NAME 
					+ "."
					+ ItemCategoryContract.ITEM_CATEGORY_ID + " = " + itemCategoryID;
			
	}




	/*
			Applying Filters
	 */



	if(latCenter>0 && latCenter>0)
	{
		// Applying shop visibility filter. Gives all the shops which are visible at the given location defined by
		// latCenter and lonCenter. For more information see the API documentation.

		queryJoin = queryJoin
				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LAT_MAX
				+ " >= " + latCenter
				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LAT_MIN
				+ " <= " + latCenter
				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LON_MAX
				+ " >= " + lonCenter
				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LON_MIN
				+ " <= " + lonCenter;

		//+ " BETWEEN " + latmax + " AND " + latmin;
	}



	if(deliveryRangeMin > 0||deliveryRangeMax>0){

		// apply delivery range filter

		queryJoin = queryJoin
				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.DELIVERY_RANGE
				+ " BETWEEN " + deliveryRangeMin + " AND " + deliveryRangeMax;
				//+ " <= " + deliveryRange;
	}


	// proximity cannot be greater than the delivery range if the delivery range is supplied. Otherwise this condition is
	// not required.
	if(proximity > 0 && (deliveryRangeMax ==0 || (deliveryRangeMax > 0 && proximity <= deliveryRangeMax)))
	{
		// generate bounding coordinates for the shop based on the required location and its

		center = GeoLocation.fromDegrees(latCenter,lonCenter);
		minMaxArray = center.boundingCoordinates(proximity,6371.01);

		pointOne = minMaxArray[0];
		pointTwo = minMaxArray[1];

		double latMin = pointOne.getLatitudeInDegrees();
		double lonMin = pointOne.getLongitudeInDegrees();
		double latMax = pointTwo.getLatitudeInDegrees();
		double lonMax = pointTwo.getLongitudeInDegrees();


		// Make sure that shop center lies between the bounding coordinates generated by proximity bounding box

		queryJoin = queryJoin

				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LAT_CENTER
				+ " < " + latMax

				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LAT_CENTER
				+ " > " + latMin

				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LON_CENTER
				+ " < " + lonMax

				+ " AND "
				+ ShopContract.TABLE_NAME
				+ "."
				+ ShopContract.LON_CENTER
				+ " > " + lonMin;
	}



	/*
			Applying Filters Ends
	 */


	if(itemCategoryID == 0 && (latCenter== 0 || lonCenter==0) && deliveryRangeMax == 0 && proximity == 0)
	{
		query = queryNormal;

	} else
	{
		query = queryJoin;
	}
	
	/*
		
		if(shopID > 0)
		{
			if(isFirst == true)
			{
			query = query + " WHERE " 
					+ "SI." + ShopItemContract.SHOP_ID + " = " + shopID;
			
			isFirst = false;
			
			} else 
				
			{
				query = query + " AND "
						+ ShopItemContract.SHOP_ID + " = " + shopID; 
			}
			
			
		}
		
		
		if(itemID > 0)
		{
			if(isFirst == true)
			{
				query = query + " WHERE " 
		
						+ "SI." + ShopItemContract.ITEM_ID + " = " + itemID;
				
				isFirst = false;
				
			} else 
			{
				query = query + " AND "
						+ "SI." + ShopItemContract.ITEM_ID + " = " + itemID;
				
			}
			
		}
		
		
		
		if(itemCategoryID > 0)
		{
			

			if(isFirst == true)
			{
				query = query + " WHERE " 
						+ "IC." + ItemCategoryContract.ITEM_CATEGORY_ID + " = " + itemCategoryID;
				
				isFirst = false;
				
			} else 
			{
				query = query + " AND "
						+ "IC." + ItemCategoryContract.ITEM_CATEGORY_ID + " = " + itemCategoryID;
				
			}
		
			
		}
		
		*/
		
		
	System.out.println("query: " + queryJoin);
		
		
		
		ArrayList<ShopItem> shopItemList = new ArrayList<ShopItem>();
		
		
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		
		try {


			conn = DriverManager.getConnection(
					JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD
			);
			
			stmt = conn.createStatement();
			
			rs = stmt.executeQuery(query);
			
			while(rs.next())
			{
				
				ShopItem shopItem = new ShopItem();
				shopItem.setShopID(rs.getInt(ShopItemContract.SHOP_ID));
				shopItem.setItemID(rs.getInt(ShopItemContract.ITEM_ID));
				shopItem.setAvailableItemQuantity(rs.getInt(ShopItemContract.AVAILABLE_ITEM_QUANTITY));
				shopItem.setItemPrice(rs.getDouble(ShopItemContract.ITEM_PRICE));
				
				shopItemList.add(shopItem);
				
			}
			
			System.out.println("Total ShopItems queried = " + shopItemList.size());	
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
								
		return shopItemList;

	}
	
}
