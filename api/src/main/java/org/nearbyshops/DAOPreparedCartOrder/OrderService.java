package org.nearbyshops.DAOPreparedCartOrder;

import com.zaxxer.hikari.HikariDataSource;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.Model.Order;
import org.nearbyshops.Model.OrderItem;
import org.nearbyshops.ModelDelivery.DeliveryAddress;
import org.nearbyshops.ModelEndPoints.OrderEndPoint;
import org.nearbyshops.ModelStats.OrderStats;
import org.nearbyshops.ModelStats.OrderStatusHomeDelivery;

import java.sql.*;
import java.util.ArrayList;

/**
 * Created by sumeet on 7/6/16.
 */
public class OrderService {


    private HikariDataSource dataSource = Globals.getDataSource();

//    private ShopDAO shopDAO = Globals.shopDAO;
//    private ShopItemDAO shopItemDAO = Globals.shopItemDAO;

    public Order placeOrder(Order order, int cartID)
    {

        /*

        1. Copy cart to order
        2. Copy cart_item to order_item
        3. update available_item_quantity from order to shop_item
        4. delete cart_item
        5. delete cart
         */


        int orderID = -1;
        int rowCount = -1;
        int rowCountAvailableItemQuantity= -1;
        int status = 0;

        orderID = copyCartToOrder(cartID);

        if(orderID > 0)
        {
            status = 1;
            rowCount = copyCartItemToOrderItem(orderID,cartID);

        }

        if(rowCount > 0)
        {
            status = 2;
            rowCountAvailableItemQuantity = Globals.shopItemDAO.updateAvailableItemQuantity(orderID);

            // delete cart_item here
            Globals.cartItemService.deleteCartItem(null,cartID);

            // delete cart here
            Globals.cartService.deleteCart(cartID);

        }

        if(orderID>0 && rowCount>0)
        {
            Order tempOrder = readOrder(orderID);

            order.setOrderID(orderID);
            order.setEndUserID(tempOrder.getEndUserID());
            order.setShopID(tempOrder.getShopID());

            if(order.getPickFromShop())
            {
               order.setDeliveryCharges(0);
                order.setStatusPickFromShop(1);

            }else
            {
                order.setDeliveryCharges((int)Globals.shopDAO.getShop(tempOrder.getShopID(),null,null).getDeliveryCharges());
                order.setStatusHomeDelivery(1);
            }

            order.setPaymentReceived(false);
            order.setDeliveryReceived(false);


            updateOrder(order);

            return readOrder(orderID);

        }

        return null;
    }



    private int copyCartToOrder(int cartID)
    {

        String copyCartToOrder = "insert into customer_order " +
                "(end_user_id,shop_id) " +
                "select end_user_id , shop_id from cart where cart_id = " +
                cartID;


        Connection connection = null;
        Statement statement = null;
        int rowIdOfInsertedRow = -1;



        try {

            connection = dataSource.getConnection();
            statement = connection.createStatement();

            rowIdOfInsertedRow = statement.executeUpdate(copyCartToOrder,Statement.RETURN_GENERATED_KEYS);
            ResultSet rs = statement.getGeneratedKeys();


            if(rs.next())
            {
                rowIdOfInsertedRow = rs.getInt(1);
            }



            System.out.println("Key autogenerated Order: " + rowIdOfInsertedRow);


        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally
        {

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return rowIdOfInsertedRow;
    }




    private int copyCartItemToOrderItem(int orderID, int cartID)
    {



        String copyCartItemToOrderItem =

                "insert into " +
                        " order_item" +
                        " (order_id" + "," + "item_id" + "," + " item_price_at_order" + ","
                        + "item_quantity) " +

                        " select " + orderID +
                ", shop_item.item_id,item_price, cart_item.item_quantity from cart_item, cart,shop_item " +
                " where " +
                " cart.cart_id = cart_item.cart_id " +
                " and " +
                "shop_item.shop_id = cart.shop_id" +
                " and " +
                " shop_item.item_id = cart_item.item_id " +
                " and " +
                " cart.cart_id = " + cartID;




        Connection connection = null;
        Statement statement = null;
        int rowCount = -1;



        try {

            connection = dataSource.getConnection();
            statement = connection.createStatement();

            rowCount = statement.executeUpdate(copyCartItemToOrderItem,Statement.RETURN_GENERATED_KEYS);

            //ResultSet rs = stmt.getGeneratedKeys();

            //if(rs.next())
            //{
            //    rowIdOfInsertedRow = rs.getInt(1);
            //}



            System.out.println("Rows updated : copy cart item to order item : " + rowCount);


        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally
        {

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return rowCount;
    }




    public Order readOrder(int orderID)
    {

        String query = "SELECT * FROM " + Order.TABLE_NAME
                + " WHERE " + Order.ORDER_ID + " = " + orderID;

        Connection connection = null;
        Statement statement = null;
        ResultSet rs = null;

        Order order = null;

        try {

            connection = dataSource.getConnection();
            statement = connection.createStatement();
            rs = statement.executeQuery(query);

            while(rs.next())
            {
                order = new Order();
                order.setShopID(rs.getInt(Order.SHOP_ID));
                order.setDeliveryCharges(rs.getInt(Order.DELIVERY_CHARGES));
                order.setEndUserID(rs.getInt(Order.END_USER_ID));
                order.setOrderID(rs.getInt(Order.ORDER_ID));
                order.setPickFromShop(rs.getBoolean(Order.PICK_FROM_SHOP));
                order.setDateTimePlaced(rs.getTimestamp(Order.DATE_TIME_PLACED));
                order.setStatusHomeDelivery(rs.getInt(Order.STATUS_HOME_DELIVERY));
                order.setStatusPickFromShop(rs.getInt(Order.STATUS_PICK_FROM_SHOP));
                order.setDeliveryReceived(rs.getBoolean(Order.DELIVERY_RECEIVED));
                order.setPaymentReceived(rs.getBoolean(Order.PAYMENT_RECEIVED));

                order.setDeliveryAddressID((Integer) rs.getObject(Order.DELIVERY_ADDRESS_ID));
                order.setDeliveryVehicleSelfID((Integer) rs.getObject(Order.DELIVERY_GUY_SELF_ID));
            }


            //System.out.println("Total itemCategories queried " + itemCategoryList.size());



        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally

        {

            try {
                if(rs!=null)
                {rs.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        return order;
    }








    public ArrayList<Order> readOrders(Integer orderID, Integer endUserID, Integer shopID,
                                       Boolean pickFromShop,
                                       Integer homeDeliveryStatus,Integer pickFromShopStatus,
                                       Integer deliveryGuyID,
                                       Boolean paymentsReceived,
                                       Boolean deliveryReceived,
                                       String sortBy,
                                       Integer limit, Integer offset,
                                       Boolean getDeliveryAddress,
                                       Boolean getStats)
    {


        String query = "SELECT "

                + Order.TABLE_NAME + "." + Order.ORDER_ID + ","
                + Order.TABLE_NAME + "." + Order.DELIVERY_ADDRESS_ID + ","
                + Order.TABLE_NAME + "." + Order.DATE_TIME_PLACED + ","

                + Order.TABLE_NAME + "." + Order.DELIVERY_CHARGES + ","
                + Order.TABLE_NAME + "." + Order.DELIVERY_RECEIVED + ","
                + Order.TABLE_NAME + "." + Order.PAYMENT_RECEIVED + ","

                + Order.TABLE_NAME + "." + Order.DELIVERY_GUY_SELF_ID + ","
                + Order.TABLE_NAME + "." + Order.END_USER_ID + ","
                + Order.TABLE_NAME + "." + Order.PICK_FROM_SHOP + ","

                + Order.TABLE_NAME + "." + Order.SHOP_ID + ","
                + Order.TABLE_NAME + "." + Order.STATUS_HOME_DELIVERY + ","
                + Order.TABLE_NAME + "." + Order.STATUS_PICK_FROM_SHOP + ","

                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.END_USER_ID + ","
                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.CITY + ","
                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.DELIVERY_ADDRESS + ","

                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.ID + ","
                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.LANDMARK + ","
                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.NAME + ","

                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.PHONE_NUMBER + ","
                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.PINCODE + ","

//                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.LATITUDE + ","
//                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.LONGITUDE + ","

                + " count( " + OrderItem.ITEM_ID + " ) as item_count, "
                + " sum( " + OrderItem.ITEM_PRICE_AT_ORDER + " * " + OrderItem.ITEM_QUANTITY + ") as item_total "
                + " FROM " + Order.TABLE_NAME
                + " LEFT OUTER JOIN " + OrderItem.TABLE_NAME + " ON (" + Order.TABLE_NAME + "." + Order.ORDER_ID + " = " + OrderItem.TABLE_NAME + "." + OrderItem.ORDER_ID + " ) "
                + " LEFT OUTER JOIN " + DeliveryAddress.TABLE_NAME + " ON (" + Order.TABLE_NAME + "." + Order.DELIVERY_ADDRESS_ID + " = " + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.ID + ")";



        boolean isFirst = true;

        if(endUserID !=null)
        {
            query = query + " WHERE " + Order.END_USER_ID + " = " + endUserID;

            isFirst = false;
        }

        if(shopID != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.SHOP_ID + " = " + shopID;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.SHOP_ID + " = " + shopID;
            }

        }



        if(orderID!=null)
        {

            if(isFirst)
            {
                query = query + " WHERE " + Order.TABLE_NAME + "." + Order.ORDER_ID + " = " + orderID;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.TABLE_NAME + "." + Order.ORDER_ID + " = " + orderID;

            }
        }



        if(homeDeliveryStatus != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.STATUS_HOME_DELIVERY + " = " + homeDeliveryStatus;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.STATUS_HOME_DELIVERY + " = " + homeDeliveryStatus;

            }

        }


        if(pickFromShopStatus != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.STATUS_PICK_FROM_SHOP + " = " + pickFromShopStatus;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.STATUS_PICK_FROM_SHOP + " = " + pickFromShopStatus;
            }
        }



        if(pickFromShop != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.PICK_FROM_SHOP + " = " + pickFromShop;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.PICK_FROM_SHOP + " = " + pickFromShop;
            }

        }



        if(deliveryGuyID != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.DELIVERY_GUY_SELF_ID + " = " + deliveryGuyID;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.DELIVERY_GUY_SELF_ID + " = " + deliveryGuyID;
            }

        }



        if(paymentsReceived!=null)
        {

            if(isFirst)
            {
                query = query + " WHERE " + Order.PAYMENT_RECEIVED + " = " + paymentsReceived;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.PAYMENT_RECEIVED + " = " + paymentsReceived;
            }

        }



        if(deliveryReceived!=null)
        {

            if(isFirst)
            {
                query = query + " WHERE " + Order.DELIVERY_RECEIVED + " = " + deliveryReceived;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.DELIVERY_RECEIVED + " = " + deliveryReceived;
            }

        }






        // all the non-aggregate columns which are present in select must be present in group by also.
        query = query
                + " group by "
                + Order.TABLE_NAME + "." + Order.ORDER_ID + ","
                + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.ID ;



        if(sortBy!=null)
        {
            if(!sortBy.equals(""))
            {
                String queryPartSortBy = " ORDER BY " + sortBy;

                query = query + queryPartSortBy;
            }
        }



        if(limit != null)
        {

            String queryPartLimitOffset = "";

            if(offset>0)
            {
                queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + offset;

            }else
            {
                queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + 0;
            }

            query = query + queryPartLimitOffset;
        }




        ArrayList<Order> ordersList = new ArrayList<Order>();

        Connection connection = null;
        Statement statement = null;
        ResultSet rs = null;

        try {

            connection = dataSource.getConnection();
            statement = connection.createStatement();


            rs = statement.executeQuery(query);

            while(rs.next())
            {
                Order order = new Order();

                order.setShopID((Integer)rs.getObject(Order.SHOP_ID));
                order.setDeliveryCharges(rs.getInt(Order.DELIVERY_CHARGES));
                order.setEndUserID(rs.getInt(Order.END_USER_ID));

                order.setOrderID(rs.getInt(Order.ORDER_ID));
                order.setPickFromShop(rs.getBoolean(Order.PICK_FROM_SHOP));
                order.setDateTimePlaced(rs.getTimestamp(Order.DATE_TIME_PLACED));

                order.setStatusHomeDelivery(rs.getInt(Order.STATUS_HOME_DELIVERY));
                order.setStatusPickFromShop(rs.getInt(Order.STATUS_PICK_FROM_SHOP));
                order.setDeliveryReceived(rs.getBoolean(Order.DELIVERY_RECEIVED));

                order.setPaymentReceived(rs.getBoolean(Order.PAYMENT_RECEIVED));
                order.setDeliveryAddressID((Integer) rs.getObject(Order.DELIVERY_ADDRESS_ID));
                order.setDeliveryVehicleSelfID((Integer) rs.getObject(Order.DELIVERY_GUY_SELF_ID));


                /*if(getDeliveryAddress!=null && getDeliveryAddress)
                {*/
                    DeliveryAddress address = new DeliveryAddress();

                    address.setEndUserID(rs.getInt(DeliveryAddress.END_USER_ID));
                    address.setCity(rs.getString(DeliveryAddress.CITY));
                    address.setDeliveryAddress(rs.getString(DeliveryAddress.DELIVERY_ADDRESS));

                    address.setId(rs.getInt(DeliveryAddress.ID));
                    address.setLandmark(rs.getString(DeliveryAddress.LANDMARK));
                    address.setName(rs.getString(DeliveryAddress.NAME));

                    address.setPhoneNumber(rs.getLong(DeliveryAddress.PHONE_NUMBER));
                    address.setPincode(rs.getLong(DeliveryAddress.PINCODE));

                    order.setDeliveryAddress(address);
//                }


                OrderStats orderStats = new OrderStats();
                orderStats.setOrderID(rs.getInt("order_id"));
                orderStats.setItemCount(rs.getInt("item_count"));
                orderStats.setItemTotal(rs.getInt("item_total"));
                order.setOrderStats(orderStats);


                ordersList.add(order);
            }



        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


        finally

        {

            try {
                if(rs!=null)
                {rs.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return ordersList;
    }




    public OrderEndPoint endPointMetaDataOrders(Integer orderID, Integer endUserID, Integer shopID,
                                       Boolean pickFromShop,
                                       Integer homeDeliveryStatus,Integer pickFromShopStatus,
                                       Integer deliveryGuyID,
                                       Boolean paymentsReceived,
                                       Boolean deliveryReceived, Boolean getDeliveryAddress)
    {

        String query = "SELECT " +
                        "count( DISTINCT " + Order.ORDER_ID + ") as item_count" +
                        " FROM " + Order.TABLE_NAME ;



/*        if(getDeliveryAddress!=null && getDeliveryAddress)
        {

            String addressJoin = " INNER JOIN "
                    + DeliveryAddress.TABLE_NAME
                    + " ON (" + Order.TABLE_NAME + "." + Order.DELIVERY_ADDRESS_ID
                    + " = " + DeliveryAddress.TABLE_NAME + "." + DeliveryAddress.ID + ")";

            query = query + addressJoin;
        }*/


        boolean isFirst = true;

        if(endUserID !=null)
        {
            query = query + " WHERE " + Order.END_USER_ID + " = " + endUserID;

            isFirst = false;
        }

        if(shopID != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.SHOP_ID + " = " + shopID;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.SHOP_ID + " = " + shopID;

            }

        }


        if(orderID!=null)
        {

            if(isFirst)
            {
                query = query + " WHERE " + Order.TABLE_NAME + "." + Order.ORDER_ID + " = " + orderID;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.TABLE_NAME + "." + Order.ORDER_ID + " = " + orderID;

            }
        }



        if(homeDeliveryStatus != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.STATUS_HOME_DELIVERY + " = " + homeDeliveryStatus;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.STATUS_HOME_DELIVERY + " = " + homeDeliveryStatus;

            }

        }


        if(pickFromShopStatus != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.STATUS_PICK_FROM_SHOP + " = " + pickFromShopStatus;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.STATUS_PICK_FROM_SHOP + " = " + pickFromShopStatus;
            }
        }



        if(pickFromShop != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.PICK_FROM_SHOP + " = " + pickFromShop;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.PICK_FROM_SHOP + " = " + pickFromShop;
            }

        }



        if(deliveryGuyID != null)
        {
            if(isFirst)
            {
                query = query + " WHERE " + Order.DELIVERY_GUY_SELF_ID + " = " + deliveryGuyID;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.DELIVERY_GUY_SELF_ID + " = " + deliveryGuyID;
            }

        }



        if(paymentsReceived!=null)
        {

            if(isFirst)
            {
                query = query + " WHERE " + Order.PAYMENT_RECEIVED + " = " + paymentsReceived;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.PAYMENT_RECEIVED + " = " + paymentsReceived;
            }

        }



        if(deliveryReceived!=null)
        {

            if(isFirst)
            {
                query = query + " WHERE " + Order.DELIVERY_RECEIVED + " = " + deliveryReceived;

                isFirst = false;

            }else
            {
                query = query + " AND " + Order.DELIVERY_RECEIVED + " = " + deliveryReceived;
            }

        }



        OrderEndPoint endPoint = new OrderEndPoint();

        Connection connection = null;
        Statement statement = null;
        ResultSet rs = null;

        try {

            connection = dataSource.getConnection();
            statement = connection.createStatement();
            rs = statement.executeQuery(query);


            while(rs.next())
            {
                endPoint.setItemCount(rs.getInt("item_count"));
            }

            System.out.println("Item Count : " + endPoint.getItemCount());



        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


        finally

        {

            try {
                if(rs!=null)
                {rs.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }


        return endPoint;
    }



    public int updateOrder(Order order)
    {
        String updateStatement = "UPDATE " + Order.TABLE_NAME

                + " SET "
                + Order.END_USER_ID + " = ?,"
                + " " + Order.SHOP_ID + " = ?,"
                + " " + Order.STATUS_HOME_DELIVERY + " = ?,"
                + " " + Order.STATUS_PICK_FROM_SHOP + " = ?,"
                + " " + Order.PAYMENT_RECEIVED + " = ?,"
                + " " + Order.DELIVERY_RECEIVED + " = ?,"
                + " " + Order.DELIVERY_CHARGES + " = ?,"
                + " " + Order.DELIVERY_ADDRESS_ID + " = ?,"
                      + Order.DELIVERY_GUY_SELF_ID + " = ?,"
                      + Order.PICK_FROM_SHOP + " = ?"
                + " WHERE " + Order.ORDER_ID + " = ?";



        Connection connection = null;
        PreparedStatement statement = null;
        int updatedRows = -1;

        try {

            connection = dataSource.getConnection();
            statement = connection.prepareStatement(updateStatement);

            statement.setObject(1,order.getEndUserID());
            statement.setObject(2,order.getShopID());
            statement.setObject(3,order.getStatusHomeDelivery());
            statement.setObject(4,order.getStatusPickFromShop());
            statement.setObject(5,order.getPaymentReceived());
            statement.setObject(6,order.getDeliveryReceived());
            statement.setObject(7,order.getDeliveryCharges());
            statement.setObject(8,order.getDeliveryAddressID());
            statement.setObject(9,order.getDeliveryVehicleSelfID());
            statement.setObject(10,order.getPickFromShop());
            statement.setObject(11,order.getOrderID());


            updatedRows = statement.executeUpdate();
            System.out.println("Total rows updated: " + updatedRows);

            //conn.close();

        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        finally

        {

            try {

                if(statement!=null)
                {statement.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            try {

                if(connection!=null)
                {connection.close();}
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        return updatedRows;
    }




    public int returnOrderByDeliveryGuy(Integer orderID)
    {
        Order order = readOrder(orderID);

        if(order!=null && (order.getStatusHomeDelivery()==5 || (order.getStatusHomeDelivery() ==6 && !order.getDeliveryReceived())))
        {
            order.setStatusHomeDelivery(OrderStatusHomeDelivery.RETURN_PENDING);

            return updateOrder(order);
        }

        return 0;
    }



    public int orderCancelledByShop(Integer orderID)
    {
        Order order = readOrder(orderID);

        if(order!=null) {

            int status = order.getStatusHomeDelivery();

            if (status == 1 || status == 2 || status == 3 || status == 4)
            {
                order.setStatusHomeDelivery(OrderStatusHomeDelivery.CANCELLED_BY_SHOP);
            }
            else if(status == 5)
            {
                order.setStatusHomeDelivery(OrderStatusHomeDelivery.CANCELLED_BY_SHOP_RETURN_PENDING);
            }

            return updateOrder(order);
        }

        return 0;
    }


}
