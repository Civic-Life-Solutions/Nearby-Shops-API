package org.nearbyshops.BackupDAOsTwo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.nearbyshops.JDBCContract;
import org.nearbyshops.Model.Item;
import org.nearbyshops.Model.ItemCategory;
import org.nearbyshops.Model.Shop;
import org.nearbyshops.Model.ShopItem;
import org.nearbyshops.ModelEndPoints.ShopEndPoint;
import org.nearbyshops.ModelReviewShop.ShopReview;
import org.nearbyshops.Utility.GeoLocation;

public class ShopService {
	
	
	public int insertShop(Shop shop)
	{
		
		Connection conn = null;
		Statement stmt = null;
		int rowIdOfInsertedRow = -1;

		String insertShop = "INSERT INTO "
				+ Shop.TABLE_NAME
				+ "("  
				+ Shop.SHOP_NAME + ","
				+ Shop.DELIVERY_CHARGES + ","
				+ Shop.DISTRIBUTOR_ID + ","
				+ Shop.LAT_CENTER + ","
				+ Shop.LON_CENTER + ","
				+ Shop.DELIVERY_RANGE + ","
				+ Shop.LON_MAX + ","
				+ Shop.LAT_MAX + ","
				+ Shop.LON_MIN + ","
				+ Shop.LAT_MIN + ","
				+ Shop.IMAGE_PATH + ","

				+ Shop.SHOP_ADDRESS + ","
				+ Shop.CITY + ","
				+ Shop.PINCODE + ","
				+ Shop.LANDMARK + ","
				+ Shop.BILL_AMOUNT_FOR_FREE_DELIVERY + ","
				+ Shop.CUSTOMER_HELPLINE_NUMBER + ","
				+ Shop.DELIVERY_HELPLINE_NUMBER + ","
				+ Shop.SHORT_DESCRIPTION + ","
				+ Shop.LONG_DESCRIPTION + ","
				+ Shop.IS_OPEN + ""

				+ " ) VALUES ("
				+ "'" + shop.getShopName() + "',"
				+ "" + shop.getDeliveryCharges() + ","
				+ "" + shop.getDistributorID() + ","
				+ "" + shop.getLatCenter() + ","
				+ "" + shop.getLonCenter() + ","
				+ "" + shop.getDeliveryRange() + ","
				+ "" + shop.getLonMax() + ","
				+ "" + shop.getLatMax() + ","
				+ "" + shop.getLonMin() + ","
				+ "" + shop.getLatMin() + ","
				+ "'" + shop.getImagePath() + "',"

				+ "'" + shop.getShopAddress() + "',"
				+ "'" + shop.getCity() + "',"
				+ "'" + shop.getPincode() + "',"
				+ "'" + shop.getLandmark() + "',"
				+ "" + shop.getBillAmountForFreeDelivery() + ","
				+ "'" + shop.getCustomerHelplineNumber() + "',"
				+ "'" + shop.getDeliveryHelplineNumber() + "',"
				+ "'" + shop.getShortDescription() + "',"
				+ "'" + shop.getLongDescription() + "',"
				+ "" + shop.getisOpen() + ""
				+ ")";
		
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			rowIdOfInsertedRow = stmt.executeUpdate(insertShop,Statement.RETURN_GENERATED_KEYS);
			
			ResultSet rs = stmt.getGeneratedKeys();
			
			if(rs.next())
			{
				rowIdOfInsertedRow = rs.getInt(1);
			}
			
			
			
			System.out.println("Key autogenerated SaveShop: " + rowIdOfInsertedRow);
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		
		return rowIdOfInsertedRow;

	}
	
	
	public int updateShop(Shop shop)
	{
		
		
		String updateStatement = "UPDATE " + Shop.TABLE_NAME
				+ " SET "

				+ Shop.SHOP_NAME + " = " + "'" + shop.getShopName() + "',"
				+ Shop.DELIVERY_CHARGES + " =" + "" + shop.getDeliveryCharges() + ","
				+ Shop.DISTRIBUTOR_ID + " =" + "" + shop.getDistributorID() + ","
				+ Shop.LAT_CENTER + " =" + "" + shop.getLatCenter() + ","
				+ Shop.LON_CENTER + " =" + "" + shop.getLonCenter() + ","
				+ Shop.DELIVERY_RANGE + " =" + "" + shop.getDeliveryRange() + ","
				+ Shop.LON_MAX + " =" + "" + shop.getLonMax() + ","
				+ Shop.LAT_MAX + " =" + "" + shop.getLatMax() + ","
				+ Shop.LON_MIN + " =" + "" + shop.getLonMin() + ","
				+ Shop.LAT_MIN + " =" + "" + shop.getLatMin() + ","
				+ Shop.IMAGE_PATH + " = " + "'" + shop.getImagePath() + "',"

				+ Shop.SHOP_ADDRESS + " = " + "'" + shop.getShopAddress() + "',"
				+ Shop.CITY + " = " + "'" + shop.getCity() + "',"
				+ Shop.PINCODE + " = " + "" + shop.getPincode() + ","
				+ Shop.LANDMARK + " = " + "'" + shop.getLandmark() + "',"
				+ Shop.BILL_AMOUNT_FOR_FREE_DELIVERY + " =" + "" + shop.getBillAmountForFreeDelivery() + ","
				+ Shop.CUSTOMER_HELPLINE_NUMBER + " =" + "'" + shop.getCustomerHelplineNumber() + "',"
				+ Shop.DELIVERY_HELPLINE_NUMBER + " =" + "'" + shop.getDeliveryHelplineNumber() + "',"
				+ Shop.SHORT_DESCRIPTION + " =" + "'" + shop.getShortDescription() + "',"
				+ Shop.LONG_DESCRIPTION + " =" + "'" + shop.getLongDescription() + "',"
				+ Shop.IS_OPEN + " = " + "" + shop.getisOpen() + ""

				+ " WHERE " + Shop.SHOP_ID + " = "
				+ shop.getShopID();
		
		
		
		Connection conn = null;
		Statement stmt = null;
		int updatedRows = -1;
		
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			updatedRows = stmt.executeUpdate(updateStatement);
			
			
			System.out.println("Total rows updated: " + updatedRows);	
			
			//conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		
		{
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return updatedRows;

	}
	
	
	public int deleteShop(int shopID)
	{
		
		String deleteStatement = "DELETE FROM " + Shop.TABLE_NAME
				+ " WHERE " + Shop.SHOP_ID + "= "
				+ shopID;
		
		
		Connection conn= null;
		Statement stmt = null;
		int rowCountDeleted = 0;
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			rowCountDeleted = stmt.executeUpdate(deleteStatement);
			
			System.out.println(" Deleted Count: " + rowCountDeleted);	
			
			conn.close();	
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		finally
		
		{
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		
		return rowCountDeleted;
	}



	GeoLocation center;

	GeoLocation[] minMaxArray;
	GeoLocation pointOne;
	GeoLocation pointTwo;




	public ArrayList<Shop> getShops(
			Integer distributorID,
			Integer itemCategoryID,
			Double latCenter, Double lonCenter,
			Double deliveryRangeMin,Double deliveryRangeMax,
			Double proximity,
			String sortBy,
			Integer limit, Integer offset
	)
	{

		String query = "";
		String queryJoin = "";

		// flag for tracking whether to put "AND" or "WHERE"
		boolean isFirst = true;


		String queryNormal = "SELECT DISTINCT "
				+ "6371 * acos( cos( radians("
				+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
				+ lonCenter + "))"
				+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) as distance" + ","
				+ " * FROM " + Shop.TABLE_NAME;


		queryJoin = "SELECT DISTINCT "
				+ "6371 * acos(cos( radians("
				+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
				+ lonCenter + "))"
				+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) as distance" + ","
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.SHOP_NAME + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_RANGE + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_CHARGES + ","
				+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.IMAGE_PATH + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MIN + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MIN + ","

				+ Shop.TABLE_NAME + "." + Shop.SHOP_ADDRESS + ","
				+ Shop.TABLE_NAME + "." + Shop.CITY + ","
				+ Shop.TABLE_NAME + "." + Shop.PINCODE + ","
				+ Shop.TABLE_NAME + "." + Shop.LANDMARK + ","
				+ Shop.TABLE_NAME + "." + Shop.BILL_AMOUNT_FOR_FREE_DELIVERY + ","
				+ Shop.TABLE_NAME + "." + Shop.CUSTOMER_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.SHORT_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.LONG_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.IS_OPEN + ","
				+ Shop.TABLE_NAME + "." + Shop.DATE_TIME_STARTED + ","

				+  "avg(" + ShopReview.TABLE_NAME + "." + ShopReview.RATING + ") as avg_rating" + ","
				+  "count(" + Shop.TABLE_NAME + "." + Shop.SHOP_ID + ") as rating_count" + ""


				+ " FROM "

				+ ShopReview.TABLE_NAME  + " RIGHT OUTER JOIN " + Shop.TABLE_NAME

				+ " ON (" + ShopReview.TABLE_NAME + "." + ShopReview.SHOP_ID
				+ " = " + Shop.TABLE_NAME + "." + Shop.SHOP_ID + ")"

				+ "," + ShopItem.TABLE_NAME + ","
				+ Item.TABLE_NAME + "," + ItemCategory.TABLE_NAME

				+ " WHERE "
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + "="
				+ ShopItem.TABLE_NAME + "." + ShopItem.SHOP_ID

				+ " AND "
				+ ShopItem.TABLE_NAME + "." + ShopItem.ITEM_ID + "="
				+ Item.TABLE_NAME + "." + Item.ITEM_ID

				+ " AND "
				+ Item.TABLE_NAME + "." + Item.ITEM_CATEGORY_ID + "="
				+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID;



		if(distributorID != null)
		{
			queryNormal = queryNormal + " WHERE "
					+ Shop.DISTRIBUTOR_ID + " = " + distributorID;

			// reset the flag
			isFirst = false;

			queryJoin = queryJoin + " AND "
					+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID
					+ " = " + distributorID;
		}


		// Visibility Filter : Apply
		if(latCenter != null && lonCenter != null)
		{
			// Applying shop visibility filter. Gives all the shops which are visible at the given location defined by
			// latCenter and lonCenter. For more information see the API documentation.


			String queryPartlatLonCenter = "";
			String queryPartlatLonCenterTwo = "";

			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}


			//+ " BETWEEN " + latmax + " AND " + latmin;

			// Visibility filter using bounding coordinates
			queryPartlatLonCenterTwo = queryPartlatLonCenterTwo + Shop.TABLE_NAME
					+ "."
					+ Shop.LAT_MAX
					+ " >= " + latCenter
					+ " AND "
					+ Shop.TABLE_NAME
					+ "."
					+ Shop.LAT_MIN
					+ " <= " + latCenter
					+ " AND "
					+ Shop.TABLE_NAME
					+ "."
					+ Shop.LON_MAX
					+ " >= " + lonCenter
					+ " AND "
					+ Shop.TABLE_NAME
					+ "."
					+ Shop.LON_MIN
					+ " <= " + lonCenter;


			queryPartlatLonCenter = queryPartlatLonCenter + " 6371.01 * acos( cos( radians("
					+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
					+ lonCenter + "))"
					+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) <= delivery_range ";



			queryNormal = queryNormal + queryPartlatLonCenter;

			queryJoin = queryJoin + " AND " + queryPartlatLonCenter;

		}



		// Delivery Range Filter : apply
		if(deliveryRangeMin != null || deliveryRangeMax != null){

			// apply delivery range filter
			String queryPartDeliveryRange = "";

			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}




			queryPartDeliveryRange = queryPartDeliveryRange + Shop.TABLE_NAME
					+ "."
					+ Shop.DELIVERY_RANGE
					+ " BETWEEN " + deliveryRangeMin + " AND " + deliveryRangeMax;
					//+ " <= " + deliveryRange;

			queryNormal = queryNormal + queryPartDeliveryRange;

			queryJoin = queryJoin + " AND " + queryPartDeliveryRange;

		}


		// Proximity Filter
		if(proximity != null)
		{
			// proximity > 0 && (deliveryRangeMax==0 || (deliveryRangeMax > 0 && proximity <= deliveryRangeMax))

			String queryPartProximity = "";
			String queryPartProximityTwo = "";

			// generate bounding coordinates for the shop based on the required location and its
			center = GeoLocation.fromDegrees(latCenter,lonCenter);
			minMaxArray = center.boundingCoordinates(proximity,6371.01);

			pointOne = minMaxArray[0];
			pointTwo = minMaxArray[1];

			double latMin = pointOne.getLatitudeInDegrees();
			double lonMin = pointOne.getLongitudeInDegrees();
			double latMax = pointTwo.getLatitudeInDegrees();
			double lonMax = pointTwo.getLongitudeInDegrees();


			// Make sure that shop center lies between the bounding coordinates generated by proximity bounding box


				// Filtering by proximity using bounding coordinates
			queryPartProximityTwo = queryPartProximityTwo+ Shop.TABLE_NAME
					+ "."
					+ Shop.LAT_CENTER
					+ " < " + latMax

					+ " AND "
					+ Shop.TABLE_NAME
					+ "."
					+ Shop.LAT_CENTER
					+ " > " + latMin

					+ " AND "
					+ Shop.TABLE_NAME
					+ "."
					+ Shop.LON_CENTER
					+ " < " + lonMax

					+ " AND "
					+ Shop.TABLE_NAME
					+ "."
					+ Shop.LON_CENTER
					+ " > " + lonMin;


				// filter using Haversine formula using SQL math functions
			queryPartProximity = queryPartProximity
					+ " (6371.01 * acos(cos( radians("
					+ latCenter
					+ ")) * cos( radians("
					+ Shop.LAT_CENTER
					+ " )) * cos(radians( "
					+ Shop.LON_CENTER
					+ ") - radians("
					+ lonCenter
					+ "))"
					+ " + sin( radians("
					+ latCenter
					+ ")) * sin(radians("
					+ Shop.LAT_CENTER
					+ ")))) <= "
					+ proximity ;


			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}



			queryNormal = queryNormal + queryPartProximity;

			queryJoin = queryJoin + " AND " + queryPartProximity;


		}


		if(itemCategoryID != null)
		{
			// filter shops by Item Category DELIVERY_GUY_SELF_ID
			queryJoin = queryJoin + " AND "
					+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID
					+ " = "
					+ itemCategoryID;
		}


		queryJoin = queryJoin

				+ " group by "

				+ "distance,"
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.SHOP_NAME + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_RANGE + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_CHARGES + ","
				+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.IMAGE_PATH + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MIN + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MIN + ","

				+ Shop.TABLE_NAME + "." + Shop.SHOP_ADDRESS + ","
				+ Shop.TABLE_NAME + "." + Shop.CITY + ","
				+ Shop.TABLE_NAME + "." + Shop.PINCODE + ","
				+ Shop.TABLE_NAME + "." + Shop.LANDMARK + ","
				+ Shop.TABLE_NAME + "." + Shop.BILL_AMOUNT_FOR_FREE_DELIVERY + ","
				+ Shop.TABLE_NAME + "." + Shop.CUSTOMER_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.SHORT_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.LONG_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.IS_OPEN + ","
				+ Shop.TABLE_NAME + "." + Shop.DATE_TIME_STARTED + "";



		if(sortBy!=null)
		{
			if(!sortBy.equals(""))
			{
				String queryPartSortBy = " ORDER BY " + sortBy;

				queryNormal = queryNormal + queryPartSortBy;
				queryJoin = queryJoin + queryPartSortBy;
			}
		}



		if(limit !=null)
		{

			String queryPartLimitOffset = "";

			if(offset!=null)
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + offset;

			}else
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + 0;
			}


			queryNormal = queryNormal + queryPartLimitOffset;
			queryJoin = queryJoin + queryPartLimitOffset;
		}



		// use Join query only if filtering requires a join
		/*if(itemCategoryID !=null)
		{
			query = queryJoin;

		}else
		{
			query = queryNormal;
		}*/


		query = queryJoin;




		
		ArrayList<Shop> shopList = new ArrayList<Shop>();
		
		
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			rs = stmt.executeQuery(query);
			
			while(rs.next())
			{
				
				Shop shop = new Shop();
				shop.setDistance(rs.getDouble("distance"));
				shop.setShopID(rs.getInt(Shop.SHOP_ID));
				shop.setShopName(rs.getString(Shop.SHOP_NAME));
				shop.setLatCenter(rs.getFloat(Shop.LAT_CENTER));
				shop.setLonCenter(rs.getFloat(Shop.LON_CENTER));
				shop.setDeliveryCharges(rs.getFloat(Shop.DELIVERY_CHARGES));
				shop.setLatMax(rs.getDouble(Shop.LAT_MAX));
				shop.setLonMax(rs.getDouble(Shop.LON_MAX));
				shop.setLatMin(rs.getDouble(Shop.LAT_MIN));
				shop.setLonMin(rs.getDouble(Shop.LON_MIN));
				shop.setDistributorID(rs.getInt(Shop.DISTRIBUTOR_ID));
				shop.setDeliveryRange(rs.getDouble(Shop.DELIVERY_RANGE));
				shop.setImagePath(rs.getString(Shop.IMAGE_PATH));

				shop.setShopAddress(rs.getString(Shop.SHOP_ADDRESS));
				shop.setCity(rs.getString(Shop.CITY));
				shop.setPincode(rs.getLong(Shop.PINCODE));
				shop.setLandmark(rs.getString(Shop.LANDMARK));
				shop.setBillAmountForFreeDelivery(rs.getInt(Shop.BILL_AMOUNT_FOR_FREE_DELIVERY));
				shop.setCustomerHelplineNumber(rs.getString(Shop.CUSTOMER_HELPLINE_NUMBER));
				shop.setDeliveryHelplineNumber(rs.getString(Shop.DELIVERY_HELPLINE_NUMBER));
				shop.setShortDescription(rs.getString(Shop.SHORT_DESCRIPTION));
				shop.setLongDescription(rs.getString(Shop.LONG_DESCRIPTION));
				shop.setDateTimeStarted(rs.getTimestamp(Shop.DATE_TIME_STARTED));
				shop.setisOpen(rs.getBoolean(Shop.IS_OPEN));

				shop.setRt_rating_avg(rs.getFloat("avg_rating"));
				shop.setRt_rating_count(rs.getFloat("rating_count"));


				shopList.add(shop);
				
			}
			
			System.out.println("Total Shops queried " + shopList.size());


			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return shopList;
	}




	public ShopEndPoint getEndPointMetadata(
			Integer distributorID,
			Integer itemCategoryID,
			Double latCenter, Double lonCenter,
			Double deliveryRangeMin,Double deliveryRangeMax,
			Double proximity)
	{


		String query = "";
		String queryJoin = "";

		// flag for tracking whether to put "AND" or "WHERE"
		boolean isFirst = true;


		String queryNormal = "SELECT DISTINCT "
				+ " count(*) as item_count "
				+ " FROM " + Shop.TABLE_NAME;


		queryJoin = "SELECT DISTINCT "
				+ " count(*) as item_count "
				+ " FROM "
				+ Shop.TABLE_NAME  + "," + ShopItem.TABLE_NAME + ","
				+ Item.TABLE_NAME + "," + ItemCategory.TABLE_NAME

				+ " WHERE "
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + "="
				+ ShopItem.TABLE_NAME + "." + ShopItem.SHOP_ID

				+ " AND "
				+ ShopItem.TABLE_NAME + "." + ShopItem.ITEM_ID + "="
				+ Item.TABLE_NAME + "." + Item.ITEM_ID

				+ " AND "
				+ Item.TABLE_NAME + "." + Item.ITEM_CATEGORY_ID + "="
				+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID;



		if(distributorID != null)
		{
			queryNormal = queryNormal + " WHERE "
					+ Shop.DISTRIBUTOR_ID + " = " + distributorID;

			// reset the flag
			isFirst = false;

			queryJoin = queryJoin + " AND "
					+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID
					+ " = " + distributorID;
		}


		// Visibility Filter : Apply
		if(latCenter != null && lonCenter != null)
		{
			// Applying shop visibility filter. Gives all the shops which are visible at the given location defined by
			// latCenter and lonCenter. For more information see the API documentation.


			String queryPartlatLonCenter = "";

			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}


			queryPartlatLonCenter = queryPartlatLonCenter + " 6371.01 * acos( cos( radians("
					+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
					+ lonCenter + "))"
					+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) <= delivery_range ";



			queryNormal = queryNormal + queryPartlatLonCenter;

			queryJoin = queryJoin + " AND " + queryPartlatLonCenter;

		}



		// Delivery Range Filter : apply
		if(deliveryRangeMin != null || deliveryRangeMax != null){

			// apply delivery range filter
			String queryPartDeliveryRange = "";

			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}




			queryPartDeliveryRange = queryPartDeliveryRange + Shop.TABLE_NAME
					+ "."
					+ Shop.DELIVERY_RANGE
					+ " BETWEEN " + deliveryRangeMin + " AND " + deliveryRangeMax;
			//+ " <= " + deliveryRange;

			queryNormal = queryNormal + queryPartDeliveryRange;

			queryJoin = queryJoin + " AND " + queryPartDeliveryRange;

		}


		// Proximity Filter
		if(proximity != null)
		{
			// proximity > 0 && (deliveryRangeMax==0 || (deliveryRangeMax > 0 && proximity <= deliveryRangeMax))

			String queryPartProximity = "";


			// Make sure that shop center lies between the bounding coordinates generated by proximity bounding box


			// filter using Haversine formula using SQL math functions
			queryPartProximity = queryPartProximity
					+ " (6371.01 * acos(cos( radians("
					+ latCenter
					+ ")) * cos( radians("
					+ Shop.LAT_CENTER
					+ " )) * cos(radians( "
					+ Shop.LON_CENTER
					+ ") - radians("
					+ lonCenter
					+ "))"
					+ " + sin( radians("
					+ latCenter
					+ ")) * sin(radians("
					+ Shop.LAT_CENTER
					+ ")))) <= "
					+ proximity ;


			if(isFirst)
			{
				queryNormal = queryNormal + " WHERE ";

				// reset the flag
				isFirst = false;

			}else
			{
				queryNormal = queryNormal + " AND ";
			}



			queryNormal = queryNormal + queryPartProximity;

			queryJoin = queryJoin + " AND " + queryPartProximity;


		}


		if(itemCategoryID != null)
		{
			// filter shops by Item Category DELIVERY_GUY_SELF_ID
			queryJoin = queryJoin + " AND "
					+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID
					+ " = "
					+ itemCategoryID;
		}



		// use Join query only if filtering requires a join
		if(itemCategoryID !=null)
		{
			query = queryJoin;

		}else
		{
			query = queryNormal;
		}


		ShopEndPoint endPoint = new ShopEndPoint();


		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD);

			stmt = conn.createStatement();

			rs = stmt.executeQuery(query);

			while(rs.next())
			{

				endPoint.setItemCount(rs.getInt("item_count"));


			}

			System.out.println("Total Shops Item Count :  " + endPoint.getItemCount());



		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		finally

		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return endPoint;
	}





	public ArrayList<Shop> filterShopsByItemCategory(Integer itemCategoryID,
												Integer distributorID,
												Double latCenter, Double lonCenter,
												Double deliveryRangeMin,Double deliveryRangeMax,
												Double proximity,
												String sortBy,
												Integer limit, Integer offset)
	{




			// a recursive CTE (Common table Expression) query. This query is used for retrieving hierarchical / tree set data.

			String withRecursiveStart = "WITH RECURSIVE category_tree("
					+ ItemCategory.ITEM_CATEGORY_ID + ","
					+ ItemCategory.PARENT_CATEGORY_ID
					+ ") AS (";


			String queryJoin = "SELECT DISTINCT "

					+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID + ","
					+ ItemCategory.TABLE_NAME + "." + ItemCategory.PARENT_CATEGORY_ID

					+ " FROM "
					+ ItemCategory.TABLE_NAME

					+ " WHERE "
					+ ItemCategory.ITEM_CATEGORY_ID  + " = " + itemCategoryID;


			String union = " UNION ";

			String querySelect = " SELECT "

					+ "cat." + ItemCategory.ITEM_CATEGORY_ID + ","
					+ "cat." + ItemCategory.PARENT_CATEGORY_ID

					+ " FROM category_tree tempCat," + 	ItemCategory.TABLE_NAME + " cat"
					+ " WHERE cat." + ItemCategory.PARENT_CATEGORY_ID
					+ " = tempcat." + ItemCategory.ITEM_CATEGORY_ID
					+ " )";


			String queryLast = " SELECT "
					+ ItemCategory.ITEM_CATEGORY_ID
					+ " FROM category_tree";



			String queryRecursive = withRecursiveStart + queryJoin + union + querySelect +  queryLast;





//		System.out.println(query);

		queryJoin = "SELECT DISTINCT "
				+ "6371 * acos(cos( radians("
				+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
				+ lonCenter + "))"
				+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) as distance" + ","
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.SHOP_NAME + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_RANGE + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_CHARGES + ","
				+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.IMAGE_PATH + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MIN + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MIN + ","

				+ Shop.TABLE_NAME + "." + Shop.SHOP_ADDRESS + ","
				+ Shop.TABLE_NAME + "." + Shop.CITY + ","
				+ Shop.TABLE_NAME + "." + Shop.PINCODE + ","
				+ Shop.TABLE_NAME + "." + Shop.LANDMARK + ","
				+ Shop.TABLE_NAME + "." + Shop.BILL_AMOUNT_FOR_FREE_DELIVERY + ","
				+ Shop.TABLE_NAME + "." + Shop.CUSTOMER_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.SHORT_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.LONG_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.IS_OPEN + ","
				+ Shop.TABLE_NAME + "." + Shop.DATE_TIME_STARTED + ","

				+  "avg(" + ShopReview.TABLE_NAME + "." + ShopReview.RATING + ") as avg_rating" + ","
				+  "count( DISTINCT " + Shop.TABLE_NAME + "." + Shop.SHOP_ID + ") as rating_count" + ""


				+ " FROM "

				+ ShopReview.TABLE_NAME  + " RIGHT OUTER JOIN " + Shop.TABLE_NAME

				+ " ON (" + ShopReview.TABLE_NAME + "." + ShopReview.SHOP_ID
				+ " = " + Shop.TABLE_NAME + "." + Shop.SHOP_ID + ")"

				+ " INNER JOIN "
				+ ShopItem.TABLE_NAME
				+ " ON (" + Shop.TABLE_NAME + "." + Shop.SHOP_ID + "="
				+ ShopItem.TABLE_NAME + "." + ShopItem.SHOP_ID + ")"

				+ " INNER JOIN "
				+ Item.TABLE_NAME
				+ " ON ("
				+ ShopItem.TABLE_NAME + "." + ShopItem.ITEM_ID + "="
				+ Item.TABLE_NAME + "." + Item.ITEM_ID + ")"

				+ " INNER JOIN "
				+ ItemCategory.TABLE_NAME
				+ " ON ("
				+ Item.TABLE_NAME + "." + Item.ITEM_CATEGORY_ID + "="
				+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID + ")";




/*

				+ "," + ShopItemContract.TABLE_NAME + ","
				+ Item.TABLE_NAME + "," + ItemCategory.TABLE_NAME

				+ " WHERE "
				+ Shop.TABLE_NAME + "." + Shop.ITEM_ID + "="
				+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.ITEM_ID

				+ " AND "
				+ ShopItemContract.TABLE_NAME + "." + ShopItemContract.ITEM_ID + "="
				+ Item.TABLE_NAME + "." + Item.ITEM_ID

				+ " AND "
				+ Item.TABLE_NAME + "." + Item.ITEM_CATEGORY_ID + "="
				+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID;

*/


		queryJoin = queryJoin + " AND "
				+ ItemCategory.TABLE_NAME
				+ "."
				+ ItemCategory.ITEM_CATEGORY_ID + " IN "
				+ " (" + queryRecursive + ")";



		if(distributorID != null)
		{
			queryJoin = queryJoin + " AND "
					+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID
					+ " = " + distributorID;
		}


		// Visibility Filter : Apply
		if(latCenter != null && lonCenter != null)
		{
			// Applying shop visibility filter. Gives all the shops which are visible at the given location defined by
			// latCenter and lonCenter. For more information see the API documentation.


			String queryPartlatLonCenter = "";

			queryPartlatLonCenter = queryPartlatLonCenter + " 6371.01 * acos( cos( radians("
					+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
					+ lonCenter + "))"
					+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) <= delivery_range ";

			queryJoin = queryJoin + " AND " + queryPartlatLonCenter;
		}



		// Delivery Range Filter : apply
		if(deliveryRangeMin != null || deliveryRangeMax != null){

			// apply delivery range filter
			String queryPartDeliveryRange = "";

			queryPartDeliveryRange = queryPartDeliveryRange + Shop.TABLE_NAME
					+ "."
					+ Shop.DELIVERY_RANGE
					+ " BETWEEN " + deliveryRangeMin + " AND " + deliveryRangeMax;
			//+ " <= " + deliveryRange;

			queryJoin = queryJoin + " AND " + queryPartDeliveryRange;

		}


		// Proximity Filter
		if(proximity != null)
		{
			// proximity > 0 && (deliveryRangeMax==0 || (deliveryRangeMax > 0 && proximity <= deliveryRangeMax))

			String queryPartProximity = "";


			// filter using Haversine formula using SQL math functions
			queryPartProximity = queryPartProximity
					+ " (6371.01 * acos(cos( radians("
					+ latCenter
					+ ")) * cos( radians("
					+ Shop.LAT_CENTER
					+ " )) * cos(radians( "
					+ Shop.LON_CENTER
					+ ") - radians("
					+ lonCenter
					+ "))"
					+ " + sin( radians("
					+ latCenter
					+ ")) * sin(radians("
					+ Shop.LAT_CENTER
					+ ")))) <= "
					+ proximity ;

			queryJoin = queryJoin + " AND " + queryPartProximity;


		}




		queryJoin = queryJoin

				+ " group by "

				+ "distance,"
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.SHOP_NAME + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_CENTER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_RANGE + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_CHARGES + ","
				+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID + ","
				+ Shop.TABLE_NAME + "." + Shop.IMAGE_PATH + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LAT_MIN + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MAX + ","
				+ Shop.TABLE_NAME + "." + Shop.LON_MIN + ","

				+ Shop.TABLE_NAME + "." + Shop.SHOP_ADDRESS + ","
				+ Shop.TABLE_NAME + "." + Shop.CITY + ","
				+ Shop.TABLE_NAME + "." + Shop.PINCODE + ","
				+ Shop.TABLE_NAME + "." + Shop.LANDMARK + ","
				+ Shop.TABLE_NAME + "." + Shop.BILL_AMOUNT_FOR_FREE_DELIVERY + ","
				+ Shop.TABLE_NAME + "." + Shop.CUSTOMER_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.DELIVERY_HELPLINE_NUMBER + ","
				+ Shop.TABLE_NAME + "." + Shop.SHORT_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.LONG_DESCRIPTION + ","
				+ Shop.TABLE_NAME + "." + Shop.IS_OPEN + ","
				+ Shop.TABLE_NAME + "." + Shop.DATE_TIME_STARTED + "";







		if(sortBy!=null)
		{
			if(!sortBy.equals(""))
			{
				String queryPartSortBy = " ORDER BY " + sortBy;

				queryJoin = queryJoin + queryPartSortBy;
			}
		}



		if(limit !=null)
		{

			String queryPartLimitOffset = "";

			if(offset!=null)
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + offset;

			}else
			{
				queryPartLimitOffset = " LIMIT " + limit + " " + " OFFSET " + 0;
			}

			queryJoin = queryJoin + queryPartLimitOffset;
		}



		ArrayList<Shop> shopList = new ArrayList<Shop>();


		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD);

			stmt = conn.createStatement();

			rs = stmt.executeQuery(queryJoin);

			while(rs.next())
			{

				Shop shop = new Shop();
				shop.setDistance(rs.getDouble("distance"));
				shop.setShopID(rs.getInt(Shop.SHOP_ID));
				shop.setShopName(rs.getString(Shop.SHOP_NAME));
				shop.setLatCenter(rs.getFloat(Shop.LAT_CENTER));
				shop.setLonCenter(rs.getFloat(Shop.LON_CENTER));
				shop.setDeliveryCharges(rs.getFloat(Shop.DELIVERY_CHARGES));
				shop.setLatMax(rs.getDouble(Shop.LAT_MAX));
				shop.setLonMax(rs.getDouble(Shop.LON_MAX));
				shop.setLatMin(rs.getDouble(Shop.LAT_MIN));
				shop.setLonMin(rs.getDouble(Shop.LON_MIN));
				shop.setDistributorID(rs.getInt(Shop.DISTRIBUTOR_ID));
				shop.setDeliveryRange(rs.getDouble(Shop.DELIVERY_RANGE));
				shop.setImagePath(rs.getString(Shop.IMAGE_PATH));

				shop.setShopAddress(rs.getString(Shop.SHOP_ADDRESS));
				shop.setCity(rs.getString(Shop.CITY));
				shop.setPincode(rs.getLong(Shop.PINCODE));
				shop.setLandmark(rs.getString(Shop.LANDMARK));
				shop.setBillAmountForFreeDelivery(rs.getInt(Shop.BILL_AMOUNT_FOR_FREE_DELIVERY));
				shop.setCustomerHelplineNumber(rs.getString(Shop.CUSTOMER_HELPLINE_NUMBER));
				shop.setDeliveryHelplineNumber(rs.getString(Shop.DELIVERY_HELPLINE_NUMBER));
				shop.setShortDescription(rs.getString(Shop.SHORT_DESCRIPTION));
				shop.setLongDescription(rs.getString(Shop.LONG_DESCRIPTION));
				shop.setDateTimeStarted(rs.getTimestamp(Shop.DATE_TIME_STARTED));
				shop.setisOpen(rs.getBoolean(Shop.IS_OPEN));

				shop.setRt_rating_avg(rs.getFloat("avg_rating"));
				shop.setRt_rating_count(rs.getFloat("rating_count"));


				shopList.add(shop);

			}

			System.out.println("Total Shops queried " + shopList.size());



		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		finally

			{

				try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				try {

					if(stmt!=null)
					{stmt.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				try {

					if(conn!=null)
					{conn.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}


			return shopList;
	}


	public ShopEndPoint endPointMetadataFilterShops( Integer itemCategoryID,
												Integer distributorID,
												Double latCenter, Double lonCenter,
												Double deliveryRangeMin,Double deliveryRangeMax,
												Double proximity)
	{





		// a recursive CTE (Common table Expression) query. This query is used for retrieving hierarchical / tree set data.

		String withRecursiveStart = "WITH RECURSIVE category_tree("
				+ ItemCategory.ITEM_CATEGORY_ID + ","
				+ ItemCategory.PARENT_CATEGORY_ID
				+ ") AS (";


		String queryJoin = "SELECT DISTINCT "

				+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID + ","
				+ ItemCategory.TABLE_NAME + "." + ItemCategory.PARENT_CATEGORY_ID

				+ " FROM "
				+ ItemCategory.TABLE_NAME

				+ " WHERE "
				+ ItemCategory.ITEM_CATEGORY_ID  + " = " + itemCategoryID;


		String union = " UNION ";

		String querySelect = " SELECT "

				+ "cat." + ItemCategory.ITEM_CATEGORY_ID + ","
				+ "cat." + ItemCategory.PARENT_CATEGORY_ID

				+ " FROM category_tree tempCat," + 	ItemCategory.TABLE_NAME + " cat"
				+ " WHERE cat." + ItemCategory.PARENT_CATEGORY_ID
				+ " = tempcat." + ItemCategory.ITEM_CATEGORY_ID
				+ " )";


		String queryLast = " SELECT "
				+ ItemCategory.ITEM_CATEGORY_ID
				+ " FROM category_tree";



		String queryRecursive = withRecursiveStart + queryJoin + union + querySelect +  queryLast;





//		System.out.println(query);

		// + ShopContract.TABLE_NAME + "." + ShopContract.ITEM_ID +

		queryJoin = "SELECT DISTINCT "

				+ "count(DISTINCT(" + Shop.TABLE_NAME + "." + Shop.SHOP_ID + ")) as item_count"

				+ " FROM "
				+ Shop.TABLE_NAME  + "," + ShopItem.TABLE_NAME + ","
				+ Item.TABLE_NAME + "," + ItemCategory.TABLE_NAME

				+ " WHERE "
				+ Shop.TABLE_NAME + "." + Shop.SHOP_ID + "="
				+ ShopItem.TABLE_NAME + "." + ShopItem.SHOP_ID

				+ " AND "
				+ ShopItem.TABLE_NAME + "." + ShopItem.ITEM_ID + "="
				+ Item.TABLE_NAME + "." + Item.ITEM_ID

				+ " AND "
				+ Item.TABLE_NAME + "." + Item.ITEM_CATEGORY_ID + "="
				+ ItemCategory.TABLE_NAME + "." + ItemCategory.ITEM_CATEGORY_ID;



		queryJoin = queryJoin + " AND "
				+ ItemCategory.TABLE_NAME
				+ "."
				+ ItemCategory.ITEM_CATEGORY_ID + " IN "
				+ " (" + queryRecursive + ")";



		if(distributorID != null)
		{
			queryJoin = queryJoin + " AND "
					+ Shop.TABLE_NAME + "." + Shop.DISTRIBUTOR_ID
					+ " = " + distributorID;
		}


		// Visibility Filter : Apply
		if(latCenter != null && lonCenter != null)
		{
			// Applying shop visibility filter. Gives all the shops which are visible at the given location defined by
			// latCenter and lonCenter. For more information see the API documentation.


			String queryPartlatLonCenter = "";

			queryPartlatLonCenter = queryPartlatLonCenter + " 6371.01 * acos( cos( radians("
					+ latCenter + ")) * cos( radians( lat_center) ) * cos(radians( lon_center ) - radians("
					+ lonCenter + "))"
					+ " + sin( radians(" + latCenter + ")) * sin(radians(lat_center))) <= delivery_range ";

			queryJoin = queryJoin + " AND " + queryPartlatLonCenter;
		}



		// Delivery Range Filter : apply
		if(deliveryRangeMin != null || deliveryRangeMax != null){

			// apply delivery range filter
			String queryPartDeliveryRange = "";

			queryPartDeliveryRange = queryPartDeliveryRange + Shop.TABLE_NAME
					+ "."
					+ Shop.DELIVERY_RANGE
					+ " BETWEEN " + deliveryRangeMin + " AND " + deliveryRangeMax;
			//+ " <= " + deliveryRange;

			queryJoin = queryJoin + " AND " + queryPartDeliveryRange;

		}


		// Proximity Filter
		if(proximity != null)
		{
			// proximity > 0 && (deliveryRangeMax==0 || (deliveryRangeMax > 0 && proximity <= deliveryRangeMax))

			String queryPartProximity = "";


			// filter using Haversine formula using SQL math functions
			queryPartProximity = queryPartProximity
					+ " (6371.01 * acos(cos( radians("
					+ latCenter
					+ ")) * cos( radians("
					+ Shop.LAT_CENTER
					+ " )) * cos(radians( "
					+ Shop.LON_CENTER
					+ ") - radians("
					+ lonCenter
					+ "))"
					+ " + sin( radians("
					+ latCenter
					+ ")) * sin(radians("
					+ Shop.LAT_CENTER
					+ ")))) <= "
					+ proximity ;

			queryJoin = queryJoin + " AND " + queryPartProximity;


		}



		ShopEndPoint endPoint = new ShopEndPoint();

		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD);

			stmt = conn.createStatement();

			rs = stmt.executeQuery(queryJoin);

			while(rs.next())
			{
				endPoint.setItemCount(rs.getInt("item_count"));
			}

			System.out.println("ShopEndpoint : ShopsCount : " + endPoint.getItemCount());



		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		finally

		{

			try {
				if(rs!=null)
				{rs.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {

				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return endPoint;
	}





	public Shop getShop(int ShopID,
						Double latCenter, Double lonCenter)
	{

		String query = " ";

		boolean distancePreset = false;

		if(latCenter!=null & lonCenter!=null)
		{
			query = "SELECT "
					+ " (6371.01 * acos(cos( radians("
					+ latCenter
					+ ")) * cos( radians("
					+ Shop.LAT_CENTER
					+ " )) * cos(radians( "
					+ Shop.LON_CENTER
					+ ") - radians("
					+ lonCenter
					+ "))"
					+ " + sin( radians("
					+ latCenter
					+ ")) * sin(radians("
					+ Shop.LAT_CENTER
					+ "))))"
					+ " as distance , * FROM " + Shop.TABLE_NAME
					+ " WHERE "	+  Shop.SHOP_ID + "= " + ShopID;

			distancePreset = true;

		}else
		{
			query = "SELECT * FROM " + Shop.TABLE_NAME
					+ " WHERE "	+  Shop.SHOP_ID + "= " + ShopID;

		}

		
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		
		Shop shop = null;
		try {
			
			conn = DriverManager.getConnection(JDBCContract.CURRENT_CONNECTION_URL,
					JDBCContract.CURRENT_USERNAME,
					JDBCContract.CURRENT_PASSWORD);
			
			stmt = conn.createStatement();
			
			rs = stmt.executeQuery(query);
			
			
			while(rs.next())
			{
				
				shop = new Shop();

				if(distancePreset) {
					shop.setDistance(rs.getDouble("distance"));
				}

				shop.setShopID(rs.getInt(Shop.SHOP_ID));
				shop.setShopName(rs.getString(Shop.SHOP_NAME));
				shop.setLatCenter(rs.getFloat(Shop.LAT_CENTER));
				shop.setLonCenter(rs.getFloat(Shop.LON_CENTER));
				shop.setDeliveryCharges(rs.getFloat(Shop.DELIVERY_CHARGES));
				shop.setLatMax(rs.getDouble(Shop.LAT_MAX));
				shop.setLonMax(rs.getDouble(Shop.LON_MAX));
				shop.setLatMin(rs.getDouble(Shop.LAT_MIN));
				shop.setLonMin(rs.getDouble(Shop.LON_MIN));
				shop.setDistributorID(rs.getInt(Shop.DISTRIBUTOR_ID));
				shop.setDeliveryRange(rs.getDouble(Shop.DELIVERY_RANGE));
				shop.setImagePath(rs.getString(Shop.IMAGE_PATH));

				shop.setShopAddress(rs.getString(Shop.SHOP_ADDRESS));
				shop.setCity(rs.getString(Shop.CITY));
				shop.setPincode(rs.getLong(Shop.PINCODE));
				shop.setLandmark(rs.getString(Shop.LANDMARK));
				shop.setBillAmountForFreeDelivery(rs.getInt(Shop.BILL_AMOUNT_FOR_FREE_DELIVERY));
				shop.setCustomerHelplineNumber(rs.getString(Shop.CUSTOMER_HELPLINE_NUMBER));
				shop.setDeliveryHelplineNumber(rs.getString(Shop.DELIVERY_HELPLINE_NUMBER));
				shop.setShortDescription(rs.getString(Shop.SHORT_DESCRIPTION));
				shop.setLongDescription(rs.getString(Shop.LONG_DESCRIPTION));
				shop.setDateTimeStarted(rs.getTimestamp(Shop.DATE_TIME_STARTED));
				shop.setisOpen(rs.getBoolean(Shop.IS_OPEN));


				shop.setRt_rating_avg(rs.getFloat("avg_rating"));
				shop.setRt_rating_count(rs.getFloat("rating_count"));
				
			}
	
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(stmt!=null)
				{stmt.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(conn!=null)
				{conn.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		return shop;
	}
	
}
